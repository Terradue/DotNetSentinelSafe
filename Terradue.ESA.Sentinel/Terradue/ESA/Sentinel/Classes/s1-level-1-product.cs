// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
//This source code was auto-generated by MonoXSD
//
namespace Terradue.ESA.Sentinel.Classes.S1 {
    
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 product annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("product", Namespace="", IsNullable=false)]
    public partial class l1ProductType {
        
        private adsHeaderType adsHeaderField;
        
        private l1QualityInformationType qualityInformationField;
        
        private l1GeneralAnnotationType generalAnnotationField;
        
        private l1ImageAnnotationType imageAnnotationField;
        
        private l1DopplerCentroidType dopplerCentroidField;
        
        private l1AntennaPatternType antennaPatternField;
        
        private l1SwathType swathTimingField;
        
        private l1GeolocationGridType geolocationGridField;
        
        private l1CoordinateConversionType coordinateConversionField;
        
        private l1SwathMergeType swathMergingField;
        
        /// <remarks>
///ADS header data set record. This DSR contains information that applies to the entire data set.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public adsHeaderType adsHeader {
            get {
                return this.adsHeaderField;
            }
            set {
                this.adsHeaderField = value;
            }
        }
        
        /// <remarks>
///Quality information data set record. This DSR contains the quality flags and the values used to set them during image processing as well as the overall quality index.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1QualityInformationType qualityInformation {
            get {
                return this.qualityInformationField;
            }
            set {
                this.qualityInformationField = value;
            }
        }
        
        /// <remarks>
///General annotation data set record. This DSR contains information describing some key characteristics that apply to the entire L1 product. This includes annotations such as the sensing start and stop times, polarisation and swath. It also contains annotations derived from the input processing step including information extracted/calculated from the downlink data and raw data analysis (RDA) statistics.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1GeneralAnnotationType generalAnnotation {
            get {
                return this.generalAnnotationField;
            }
            set {
                this.generalAnnotationField = value;
            }
        }
        
        /// <remarks>
///Image annotation data set record. This DSR contains information describing the properties of the image MDS (such as data type and image dimensions) and the key parameters/options used during the processing of the image.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1ImageAnnotationType imageAnnotation {
            get {
                return this.imageAnnotationField;
            }
            set {
                this.imageAnnotationField = value;
            }
        }
        
        /// <remarks>
///Doppler centroid data set record. This DSR contains information about the Doppler centroid values estimated and used during image processing.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1DopplerCentroidType dopplerCentroid {
            get {
                return this.dopplerCentroidField;
            }
            set {
                this.dopplerCentroidField = value;
            }
        }
        
        /// <remarks>
///Antenna pattern data set record. This DSR contains information describing the elevation antenna pattern and how it was applied by the IPF during image processing. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1AntennaPatternType antennaPattern {
            get {
                return this.antennaPatternField;
            }
            set {
                this.antennaPatternField = value;
            }
        }
        
        /// <remarks>
///Swath timing data set record. This DSR contains the information about the bursts within the image MDS including the burst dimensions, burst timing and burst location. This DSR is specific to IW and EW SLC products.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1SwathType swathTiming {
            get {
                return this.swathTimingField;
            }
            set {
                this.swathTimingField = value;
            }
        }
        
        /// <remarks>
///Geolocation grid data set record. This DSR describes the geodetitic position of line/pixel combinations within the image MDS.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1GeolocationGridType geolocationGrid {
            get {
                return this.geolocationGridField;
            }
            set {
                this.geolocationGridField = value;
            }
        }
        
        /// <remarks>
///Coordinate conversion data set record. This DSR contains the annotations required to convert between the slant range and ground range coordinate systems.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1CoordinateConversionType coordinateConversion {
            get {
                return this.coordinateConversionField;
            }
            set {
                this.coordinateConversionField = value;
            }
        }
        
        /// <remarks>
///Swath merging data set record. This DSR contains the annotations for interpreting the way in which IW or EW swaths were merged during GRD processing. The purpose of this DSR is to provide the information necessary to unambiguously identify the boundaries of each swath within the image MDS. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public l1SwathMergeType swathMerging {
            get {
                return this.swathMergingField;
            }
            set {
                this.swathMergingField = value;
            }
        }
    }
    
    /// <remarks>
///Common header for all Annotation Data Sets. This record contains the three elements - polarisation, swath and imageNumber - used to identify Annotation Data Sets and link them to the appropriate Measurement Data Set.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class adsHeaderType {
        
        private missionIdType missionIdField;
        
        private productType productTypeField;
        
        private polarisationType polarisationField;
        
        private sensorModeType modeField;
        
        private swathType swathField;
        
        private System.DateTime startTimeField;
        
        private System.DateTime stopTimeField;
        
        private string absoluteOrbitNumberField;
        
        private string missionDataTakeIdField;
        
        private string imageNumberField;
        
        /// <remarks>
///Mission identifier for this data set.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public missionIdType missionId {
            get {
                return this.missionIdField;
            }
            set {
                this.missionIdField = value;
            }
        }
        
        /// <remarks>
///Product type for this data set.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public productType productType {
            get {
                return this.productTypeField;
            }
            set {
                this.productTypeField = value;
            }
        }
        
        /// <remarks>
///Polarisation for this data set. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public polarisationType polarisation {
            get {
                return this.polarisationField;
            }
            set {
                this.polarisationField = value;
            }
        }
        
        /// <remarks>
///Sensor mode for this data set. The sensorMode type are S1-S6, IW, EW, WV, and IM.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public sensorModeType mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks>
///Swath identifier for this data set. This element identifies the swath that applies to all data contained within this data set.  The swath identifier "EW" is used for products in which the 5 EW swaths have been merged.  Likewise, "IW" is used for products in which the 3 IW swaths have been merged.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField;
            }
            set {
                this.swathField = value;
            }
        }
        
        /// <remarks>
///Zero Doppler start time of the output image [UTC]. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime startTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks>
///Zero Doppler stop time of the output image [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime stopTime {
            get {
                return this.stopTimeField;
            }
            set {
                this.stopTimeField = value;
            }
        }
        
        /// <remarks>
///Absolute orbit number at data set start time.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string absoluteOrbitNumber {
            get {
                return this.absoluteOrbitNumberField;
            }
            set {
                this.absoluteOrbitNumberField = value;
            }
        }
        
        /// <remarks>
///Mission data take identifier. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string missionDataTakeId {
            get {
                return this.missionDataTakeIdField;
            }
            set {
                this.missionDataTakeIdField = value;
            }
        }
        
        /// <remarks>
///Image number. For WV products the image number is used to distinguish between vignettes.  For SM, IW and EW modes the image number is still used but refers instead to each swath and polarisation combination (known as the 'channel') of the data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string imageNumber {
            get {
                return this.imageNumberField;
            }
            set {
                this.imageNumberField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of valid Sentinel-1 mission identifiers.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum missionIdType {
        
        /// <remarks/>
        S1A,
        
        /// <remarks/>
        S1B,
        
        /// <remarks/>
        ASA,
        
        /// <remarks/>
        RS2,
    }
    
    /// <remarks>
///Enumeration of valid product types.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum productType {
        
        /// <remarks/>
        SLC,
        
        /// <remarks/>
        GRD,
        
        /// <remarks/>
        BRW,
        
        /// <remarks/>
        OCN,
    }
    
    /// <remarks>
///Enumeration of valid polarisations for the Sentinel-1 SAR instrument.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum polarisationType {
        
        /// <remarks/>
        HH,
        
        /// <remarks/>
        HV,
        
        /// <remarks/>
        VH,
        
        /// <remarks/>
        VV,
    }
    
    /// <remarks>
///Enumeration of valid sensor mode abbreviations for the Sentinel-1 SAR instrument.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum sensorModeType {
        
        /// <remarks/>
        S1,
        
        /// <remarks/>
        S2,
        
        /// <remarks/>
        S3,
        
        /// <remarks/>
        S4,
        
        /// <remarks/>
        S5,
        
        /// <remarks/>
        S6,
        
        /// <remarks/>
        IW,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        WV,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        N1,
        
        /// <remarks/>
        N2,
        
        /// <remarks/>
        N3,
        
        /// <remarks/>
        N4,
        
        /// <remarks/>
        N5,
        
        /// <remarks/>
        N6,
        
        /// <remarks/>
        RF,
        
        /// <remarks/>
        IM,
    }
    
    /// <remarks>
///Enumeration of all valid swath identifiers for the Sentinel-1 SAR instrument. The S1-S6 swaths apply to SM products, the IW and IW1-3 swaths apply to IW products (IW is used for detected IW products where the 3 swaths are merged into one image), the EW and EW1-5 swaths apply to EW products (EW is used for detected EW products where the 5 swaths are merged into one image), and the WV1-2 swaths apply to WV products.  The EN, N1-N6 swaths apply to the Sentinel-1 notch modes used for instrument calibration.  The RF swath applies to the Sentinel-1 RFC mode which is not processed by the IPF.  The IS1-IS7 swaths apply to ASAR IM and WV products.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum swathType {
        
        /// <remarks/>
        S1,
        
        /// <remarks/>
        S2,
        
        /// <remarks/>
        S3,
        
        /// <remarks/>
        S4,
        
        /// <remarks/>
        S5,
        
        /// <remarks/>
        S6,
        
        /// <remarks/>
        IW,
        
        /// <remarks/>
        IW1,
        
        /// <remarks/>
        IW2,
        
        /// <remarks/>
        IW3,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        EW1,
        
        /// <remarks/>
        EW2,
        
        /// <remarks/>
        EW3,
        
        /// <remarks/>
        EW4,
        
        /// <remarks/>
        EW5,
        
        /// <remarks/>
        WV,
        
        /// <remarks/>
        WV1,
        
        /// <remarks/>
        WV2,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        N1,
        
        /// <remarks/>
        N2,
        
        /// <remarks/>
        N3,
        
        /// <remarks/>
        N4,
        
        /// <remarks/>
        N5,
        
        /// <remarks/>
        N6,
        
        /// <remarks/>
        RF,
        
        /// <remarks/>
        IS1,
        
        /// <remarks/>
        IS2,
        
        /// <remarks/>
        IS3,
        
        /// <remarks/>
        IS4,
        
        /// <remarks/>
        IS5,
        
        /// <remarks/>
        IS6,
        
        /// <remarks/>
        IS7,
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 quality summary annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1QualityInformationType {
        
        private @double productQualityIndexField;
        
        private qualityDataListType qualityDataListField;
        
        /// <remarks>
///Overall product quality index. This annotation is calculated based on specific quality parameters and gives an overall quality value to the product. This parameter is TBD.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double productQualityIndex {
            get {
                return this.productQualityIndexField;
            }
            set {
                this.productQualityIndexField = value;
            }
        }
        
        /// <remarks>
///Quality data list. This element contains a list of qualityData records which contain the quality values and flags calculated and set during image processing. For individual scene and slice products there is one qualityData record in the list. For assembled products the list contains one qualityData record for each included in the assembled product.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public qualityDataListType qualityDataList {
            get {
                return this.qualityDataListField;
            }
            set {
                this.qualityDataListField = value;
            }
        }
    }
    
    /// <remarks>
///64 bit double precision floating point number.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class @double {
        
        private string unitsField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField;
            }
            set {
                this.unitsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks>
///List of qualityData ADS records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class qualityDataListType {
        
        private string countField;
        
        private qualityDataType[] qualityDataField;
        
        /// <remarks>
///Number of qualityData records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks>
///Quality data. This record contains the quality values and flags that are set during image processing. Each flag indicates the status of a comparison between the corresponding value(s) and a pre-defined threshold. For individual scene and slice products there is one qualityData record. For assembled products the list contains all the qualityData records for each slice included in the assembled product. For a minimum output slice length of 10s and a maximum segment length of 25 minutes, the maximum number of records in the list is 150.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("qualityData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public qualityDataType[] qualityData {
            get {
                return this.qualityDataField;
            }
            set {
                this.qualityDataField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for quality information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class qualityDataType {
        
        private System.DateTime azimuthTimeField;
        
        private downlinkQualityType downlinkQualityField;
        
        private rawDataAnalysisQualityType rawDataAnalysisQualityField;
        
        private dopplerCentroidQualityType dopplerCentroidQualityField;
        
        private imageQualityType imageQualityField;
        
        /// <remarks>
///Zero Doppler azimuth time at which this set of quality annotations applies [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField;
            }
            set {
                this.azimuthTimeField = value;
            }
        }
        
        /// <remarks>
///Downlink quality. This record contains the quality indicators - values and flags - related to the downlink information.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public downlinkQualityType downlinkQuality {
            get {
                return this.downlinkQualityField;
            }
            set {
                this.downlinkQualityField = value;
            }
        }
        
        /// <remarks>
///Raw data analysis quality. This record contains the quality indicators - values and flags - related to the raw data analysis information.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public rawDataAnalysisQualityType rawDataAnalysisQuality {
            get {
                return this.rawDataAnalysisQualityField;
            }
            set {
                this.rawDataAnalysisQualityField = value;
            }
        }
        
        /// <remarks>
///Doppler centroid quality. This record contains the quality indicators - values and flags - related to the Doppler centroid estimation.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dopplerCentroidQualityType dopplerCentroidQuality {
            get {
                return this.dopplerCentroidQualityField;
            }
            set {
                this.dopplerCentroidQualityField = value;
            }
        }
        
        /// <remarks>
///Image quality. This record contains the quality indicators - values and flags - related to properties of the output image.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public imageQualityType imageQuality {
            get {
                return this.imageQualityField;
            }
            set {
                this.imageQualityField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for downlink quality information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downlinkQualityType {
        
        private @double iInputDataMeanField;
        
        private @double qInputDataMeanField;
        
        private bool inputDataMeanOutsideNominalRangeFlagField;
        
        private @double iInputDataStdDevField;
        
        private @double qInputDataStdDevField;
        
        private bool inputDataStDevOutsideNominalRangeFlagField;
        
        private uint32 numDownlinkInputDataGapsField;
        
        private bool downlinkGapsInInputDataSignificantFlagField;
        
        private uint32 numDownlinkInputMissingLinesField;
        
        private bool downlinkMissingLinesSignificantFlagField;
        
        private uint32 numInstrumentInputDataGapsField;
        
        private bool instrumentGapsInInputDataSignificantFlagField;
        
        private uint32 numInstrumentInputMissingLinesField;
        
        private bool instrumentMissingLinesSignificantFlagField;
        
        private uint32 numSsbErrorInputDataGapsField;
        
        private bool ssbErrorGapsInInputDataSignificantFlagField;
        
        private uint32 numSsbErrorInputMissingLinesField;
        
        private bool ssbErrorMissingLinesSignificantFlagField;
        
        private chirpSourceType chirpSourceUsedField;
        
        private pgSourceType pgSourceUsedField;
        
        private rrfSpectrumType rrfSpectrumUsedField;
        
        private bool replicaReconstructionFailedFlagField;
        
        private @double meanPgProductAmplitudeField;
        
        private @double stdDevPgProductAmplitudeField;
        
        private @double meanPgProductPhaseField;
        
        private @double stdDevPgProductPhaseField;
        
        private bool pgProductDerivationFailedFlagField;
        
        private bool invalidDownlinkParamsFlagField;
        
        /// <remarks>
///Calculated mean of the input data for the I channel.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iInputDataMean {
            get {
                return this.iInputDataMeanField;
            }
            set {
                this.iInputDataMeanField = value;
            }
        }
        
        /// <remarks>
///Calculated mean of the input data for the Q channel.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double qInputDataMean {
            get {
                return this.qInputDataMeanField;
            }
            set {
                this.qInputDataMeanField = value;
            }
        }
        
        /// <remarks>
///Input data mean outside nominal range flag. False if the mean of I and Q input values are both within specified range from expected mean. For expected mean of x, the measured mean must fall between x-threshold to x+threshold. True otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool inputDataMeanOutsideNominalRangeFlag {
            get {
                return this.inputDataMeanOutsideNominalRangeFlagField;
            }
            set {
                this.inputDataMeanOutsideNominalRangeFlagField = value;
            }
        }
        
        /// <remarks>
///Calculated standard deviation of the input data for the I channel.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iInputDataStdDev {
            get {
                return this.iInputDataStdDevField;
            }
            set {
                this.iInputDataStdDevField = value;
            }
        }
        
        /// <remarks>
///Calculated standard deviation of the input data for the Q channel.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double qInputDataStdDev {
            get {
                return this.qInputDataStdDevField;
            }
            set {
                this.qInputDataStdDevField = value;
            }
        }
        
        /// <remarks>
///Input data standard deviation outside nominal range flag. False if the standard deviation values of I and Q input values are both within specified range of expected standard deviation. For expected std. dev. x, the measured std. dev. must fall between x-threshold to x+threshold.  True otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool inputDataStDevOutsideNominalRangeFlag {
            get {
                return this.inputDataStDevOutsideNominalRangeFlagField;
            }
            set {
                this.inputDataStDevOutsideNominalRangeFlagField = value;
            }
        }
        
        /// <remarks>
///Number of downlink gaps detected in the input data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numDownlinkInputDataGaps {
            get {
                return this.numDownlinkInputDataGapsField;
            }
            set {
                this.numDownlinkInputDataGapsField = value;
            }
        }
        
        /// <remarks>
///Significant downlink gaps in the input data flag. A downlink input data gap is defined as a contiguous block of N downlink missing lines (the value of N is predefined for each product). False if the number of downlink input gaps is less than or equal to the threshold value, true if number of downlink input data gaps is greater than the threshold value.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool downlinkGapsInInputDataSignificantFlag {
            get {
                return this.downlinkGapsInInputDataSignificantFlagField;
            }
            set {
                this.downlinkGapsInInputDataSignificantFlagField = value;
            }
        }
        
        /// <remarks>
///Number of downlink missing lines detected in the input data, excluding data gaps. A downlink missing line is defined as any echo line physically absent from the input data file due to a downlink error.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numDownlinkInputMissingLines {
            get {
                return this.numDownlinkInputMissingLinesField;
            }
            set {
                this.numDownlinkInputMissingLinesField = value;
            }
        }
        
        /// <remarks>
///Downlink missing lines significant flag. False if the percentage of downlink missing lines is less than or equal to the threshold value, true if the percentage of downlink missing lines is greater than the threshold value. The number of downlink missing lines is numInputDownlinkMissingLines.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool downlinkMissingLinesSignificantFlag {
            get {
                return this.downlinkMissingLinesSignificantFlagField;
            }
            set {
                this.downlinkMissingLinesSignificantFlagField = value;
            }
        }
        
        /// <remarks>
///Number of instrument gaps detected in the input data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numInstrumentInputDataGaps {
            get {
                return this.numInstrumentInputDataGapsField;
            }
            set {
                this.numInstrumentInputDataGapsField = value;
            }
        }
        
        /// <remarks>
///Significant instrument gaps in the input data flag. An instrument input data gap is defined as a contiguous block of N instrument missing lines (the value of N is predefined for each product). False if the number of instrument input gaps is less than or equal to the threshold value, true if number of instrument input data gaps is greater than the threshold value.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool instrumentGapsInInputDataSignificantFlag {
            get {
                return this.instrumentGapsInInputDataSignificantFlagField;
            }
            set {
                this.instrumentGapsInInputDataSignificantFlagField = value;
            }
        }
        
        /// <remarks>
///Number of instrument missing lines detected in the input data, excluding data gaps. An instrument missing line is defined as any echo line physically absent from the input data file due to a failure by the instrument to produce the expected echo line.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numInstrumentInputMissingLines {
            get {
                return this.numInstrumentInputMissingLinesField;
            }
            set {
                this.numInstrumentInputMissingLinesField = value;
            }
        }
        
        /// <remarks>
///Instrument missing lines significant flag. False if the percentage of instrument missing lines is less than or equal to the threshold value, true if the percentage of instrument missing lines is greater than the threshold value. The number of instrument missing lines is numInstrumentInputMissingLines.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool instrumentMissingLinesSignificantFlag {
            get {
                return this.instrumentMissingLinesSignificantFlagField;
            }
            set {
                this.instrumentMissingLinesSignificantFlagField = value;
            }
        }
        
        /// <remarks>
///Number of gaps detected in the input data due to the SSB Error flag being set.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numSsbErrorInputDataGaps {
            get {
                return this.numSsbErrorInputDataGapsField;
            }
            set {
                this.numSsbErrorInputDataGapsField = value;
            }
        }
        
        /// <remarks>
///Significant SSB Error gaps in the input data flag. An SSB Error input data gap is defined as a contiguous block of N lines in which the SSB Error Flag is set to true (the value of N is predefined for each product). False if the number of SSB Error input gaps is less than or equal to the threshold value, true if number of SSB Error input data gaps is greater than the threshold value.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ssbErrorGapsInInputDataSignificantFlag {
            get {
                return this.ssbErrorGapsInInputDataSignificantFlagField;
            }
            set {
                this.ssbErrorGapsInInputDataSignificantFlagField = value;
            }
        }
        
        /// <remarks>
///Number of SSB Error missing lines detected in the input data, excluding data gaps. An SSB Error missing line is defined as any echo line in which the SSB Error Flag is the ISP secondary header is set to true.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numSsbErrorInputMissingLines {
            get {
                return this.numSsbErrorInputMissingLinesField;
            }
            set {
                this.numSsbErrorInputMissingLinesField = value;
            }
        }
        
        /// <remarks>
///SSB Error missing lines significant flag. False if the percentage of SSB Error missing lines is less than or equal to the threshold value, true if the percentage of SSB Error missing lines is greater than the threshold value. The number of SSB Error missing lines is numSsbErrorInputMissingLines.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ssbErrorMissingLinesSignificantFlag {
            get {
                return this.ssbErrorMissingLinesSignificantFlagField;
            }
            set {
                this.ssbErrorMissingLinesSignificantFlagField = value;
            }
        }
        
        /// <remarks>
///Chirp source used during processing (Nominal or Extracted). This value is a copy of the value from the processingInformation record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public chirpSourceType chirpSourceUsed {
            get {
                return this.chirpSourceUsedField;
            }
            set {
                this.chirpSourceUsedField = value;
            }
        }
        
        /// <remarks>
///PG source used during processing (Model or Extracted). This value is a copy of the value from the processingInformation record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public pgSourceType pgSourceUsed {
            get {
                return this.pgSourceUsedField;
            }
            set {
                this.pgSourceUsedField = value;
            }
        }
        
        /// <remarks>
///Type of range replica function used (Unextended, Extended Flat, Extended Tapered). This value is a copy of the value from the processingOptions record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public rrfSpectrumType rrfSpectrumUsed {
            get {
                return this.rrfSpectrumUsedField;
            }
            set {
                this.rrfSpectrumUsedField = value;
            }
        }
        
        /// <remarks>
///Chirp replica reconstruction failed or is of low quality flag. False if able to reconstruct at leaset one valid extracted replica during processing. True if unable to reconstruct any valid extracted replicas during processing. A replica is valid if it was successfully reconstructed and all quality measures were acceptable. If this flag is true then the processor uses the nominal range pulse for processing and a nominal elevation beam scaling factor.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool replicaReconstructionFailedFlag {
            get {
                return this.replicaReconstructionFailedFlagField;
            }
            set {
                this.replicaReconstructionFailedFlagField = value;
            }
        }
        
        /// <remarks>
///Mean of all PG product amplitude values.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double meanPgProductAmplitude {
            get {
                return this.meanPgProductAmplitudeField;
            }
            set {
                this.meanPgProductAmplitudeField = value;
            }
        }
        
        /// <remarks>
///Standard deviation of all PG product amplitude values.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double stdDevPgProductAmplitude {
            get {
                return this.stdDevPgProductAmplitudeField;
            }
            set {
                this.stdDevPgProductAmplitudeField = value;
            }
        }
        
        /// <remarks>
///Mean value of all PG product phase values [radians].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double meanPgProductPhase {
            get {
                return this.meanPgProductPhaseField;
            }
            set {
                this.meanPgProductPhaseField = value;
            }
        }
        
        /// <remarks>
///Standard deviation of all PG product phase values [radians].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double stdDevPgProductPhase {
            get {
                return this.stdDevPgProductPhaseField;
            }
            set {
                this.stdDevPgProductPhaseField = value;
            }
        }
        
        /// <remarks>
///PG product derivation failed flag. False if the percentage of invalid relative and absolute PG products is below the configured threshold; or, true otherwise. If this flag is set to true then the values from the PG product model will be used in place of the derived PG product values.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool pgProductDerivationFailedFlag {
            get {
                return this.pgProductDerivationFailedFlagField;
            }
            set {
                this.pgProductDerivationFailedFlagField = value;
            }
        }
        
        /// <remarks>
///Invalid downlink parameters flag.  False if all parameters read from the downlinked data were valid, true if any downlink parameter is out of range and therefore a default value has been used during processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool invalidDownlinkParamsFlag {
            get {
                return this.invalidDownlinkParamsFlagField;
            }
            set {
                this.invalidDownlinkParamsFlagField = value;
            }
        }
    }
    
    /// <remarks>
///32 bit unsigned integer.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(uint16))]
    public partial class uint32 : uint64 {
    }
    
    /// <remarks>
///64 bit unsigned integer.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(uint32))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(uint16))]
    public partial class uint64 : unitNonNegativeInteger {
    }
    
    /// <remarks>
///Extension of the nonNegativeInteger data type to include an optional "units" attribute.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(uint64))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(uint32))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(uint16))]
    public partial class unitNonNegativeInteger {
        
        private string unitsField1;
        
        private string valueField1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField1;
            }
            set {
                this.unitsField1 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField1;
            }
            set {
                this.valueField1 = value;
            }
        }
    }
    
    /// <remarks>
///16 bit unsigned integer.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uint16 : uint32 {
    }
    
    /// <remarks>
///Enumeration of the available chirp schemes.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum chirpSourceType {
        
        /// <remarks/>
        Nominal,
        
        /// <remarks/>
        Extracted,
    }
    
    /// <remarks>
///Enumeration of the available PG schemes.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum pgSourceType {
        
        /// <remarks/>
        Extracted,
        
        /// <remarks/>
        Model,
    }
    
    /// <remarks>
///Enumeration of valid RRF types.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum rrfSpectrumType {
        
        /// <remarks/>
        Unextended,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Extended Flat")]
        ExtendedFlat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Extended Tapered")]
        ExtendedTapered,
    }
    
    /// <remarks>
///Annotation record for RDA quality information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rawDataAnalysisQualityType {
        
        private @double iBiasField;
        
        private bool iBiasSignificanceFlagField;
        
        private @double qBiasField;
        
        private bool qBiasSignificanceFlagField;
        
        private @double iqGainImbalanceField;
        
        private bool iqGainSignificanceFlagField;
        
        private @double iqQuadratureDepartureField;
        
        private bool iqQuadratureDepartureSignificanceFlagField;
        
        /// <remarks>
///Calculated I bias. This value is a copy of the value from the rawDataAnalysis record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iBias {
            get {
                return this.iBiasField;
            }
            set {
                this.iBiasField = value;
            }
        }
        
        /// <remarks>
///I bias significance, true if I bias falls within acceptable range, false otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool iBiasSignificanceFlag {
            get {
                return this.iBiasSignificanceFlagField;
            }
            set {
                this.iBiasSignificanceFlagField = value;
            }
        }
        
        /// <remarks>
///Calculated Q bias. This value is a copy of the value from the rawDataAnalysis record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double qBias {
            get {
                return this.qBiasField;
            }
            set {
                this.qBiasField = value;
            }
        }
        
        /// <remarks>
///Q bias significance, true if Q bias falls within acceptable range, false otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool qBiasSignificanceFlag {
            get {
                return this.qBiasSignificanceFlagField;
            }
            set {
                this.qBiasSignificanceFlagField = value;
            }
        }
        
        /// <remarks>
///Calculated I/Q gain imbalance. This value is a copy of the value from the rawDataAnalysis record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqGainImbalance {
            get {
                return this.iqGainImbalanceField;
            }
            set {
                this.iqGainImbalanceField = value;
            }
        }
        
        /// <remarks>
///I/Q Gain Significance, true if I/Q gain imbalance falls within acceptable range, false otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool iqGainSignificanceFlag {
            get {
                return this.iqGainSignificanceFlagField;
            }
            set {
                this.iqGainSignificanceFlagField = value;
            }
        }
        
        /// <remarks>
///Calculated I/Q quadrature departure.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqQuadratureDeparture {
            get {
                return this.iqQuadratureDepartureField;
            }
            set {
                this.iqQuadratureDepartureField = value;
            }
        }
        
        /// <remarks>
///I/Q Quadrature Departure Significance, true if quadrature departure falls within acceptable range, false otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool iqQuadratureDepartureSignificanceFlag {
            get {
                return this.iqQuadratureDepartureSignificanceFlagField;
            }
            set {
                this.iqQuadratureDepartureSignificanceFlagField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for the Doppler centroid quality information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dopplerCentroidQualityType {
        
        private dcMethodType dcMethodField;
        
        private bool dopplerCentroidUncertainFlagField;
        
        /// <remarks>
///Doppler centroid estimation method used during processing. Both the Doppler centroid (DC) calculated from orbit geometry and the DC estimated from the raw data are annotated within the Doppler data set; however, this parameter describes the actual DC method used during image processing. This value is a copy of the value from the processingOptions record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dcMethodType dcMethod {
            get {
                return this.dcMethodField;
            }
            set {
                this.dcMethodField = value;
            }
        }
        
        /// <remarks>
///Doppler centroid uncertain flag. False if the root mean squared (RMS) error for the DCE method used for image processing is less than the specified thresholdvalue, true if the RMS error is greater than or equal to the specified thresholdvalue. Note: if more than one Doppler centroid estimation is performed, the flag is set if any RMS error is greater than or equal to the threshold.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool dopplerCentroidUncertainFlag {
            get {
                return this.dopplerCentroidUncertainFlagField;
            }
            set {
                this.dopplerCentroidUncertainFlagField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of Doppler centroid calculation/estimation methods.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum dcMethodType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Data Analysis")]
        DataAnalysis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Orbit and Attitude")]
        OrbitandAttitude,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pre-defined")]
        Predefined,
    }
    
    /// <remarks>
///Annotation record for image quality information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class imageQualityType {
        
        private imageStatisticsType imageStatisticsField;
        
        private bool outputDataMeanOutsideNominalRangeFlagField;
        
        private bool outputDataStDevOutsideNominalRangeFlagField;
        
        /// <remarks>
///Mean and standard deviation statistics for the image. This record is a copy of the record from the imageInformation record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public imageStatisticsType imageStatistics {
            get {
                return this.imageStatisticsField;
            }
            set {
                this.imageStatisticsField = value;
            }
        }
        
        /// <remarks>
///Output data mean outside nominal range flag. False if the mean of I and Q output values for SLC image or mean of detected pixels for a detected product, are both within specified range from expected mean. For expected mean of x, the measured mean must fall
///between x-threshold to x+threshold. True otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool outputDataMeanOutsideNominalRangeFlag {
            get {
                return this.outputDataMeanOutsideNominalRangeFlagField;
            }
            set {
                this.outputDataMeanOutsideNominalRangeFlagField = value;
            }
        }
        
        /// <remarks>
///Output data standard deviation outside nominal range flag. False if the std. dev. of I and Q output values for SLC image or std. dev. of detected
///pixels for a detected product, are both within specified range from expected std. dev. For expected std. dev. of x, the measured std. dev. must fall between x-threshold to x+threshold.  True otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool outputDataStDevOutsideNominalRangeFlag {
            get {
                return this.outputDataStDevOutsideNominalRangeFlagField;
            }
            set {
                this.outputDataStDevOutsideNominalRangeFlagField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for image statistics information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class imageStatisticsType {
        
        private complex outputDataMeanField;
        
        private complex outputDataStdDevField;
        
        /// <remarks>
///Mean value of output data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public complex outputDataMean {
            get {
                return this.outputDataMeanField;
            }
            set {
                this.outputDataMeanField = value;
            }
        }
        
        /// <remarks>
///Standard deviation of output data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public complex outputDataStdDev {
            get {
                return this.outputDataStdDevField;
            }
            set {
                this.outputDataStdDevField = value;
            }
        }
    }
    
    /// <remarks>
///64 bit complex number consisting of a 32 bit single precision floating point real part and a 32 bit single precision floating point imaginary part.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class complex {
        
        private @float reField;
        
        private @float imField;
        
        /// <remarks>
///32 bit single precision floating point real number.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float re {
            get {
                return this.reField;
            }
            set {
                this.reField = value;
            }
        }
        
        /// <remarks>
///32 bit single precision floating point imaginary number.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float im {
            get {
                return this.imField;
            }
            set {
                this.imField = value;
            }
        }
    }
    
    /// <remarks>
///32 bit single precision floating point number.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class @float {
        
        private string unitsField2;
        
        private float valueField2;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField2;
            }
            set {
                this.unitsField2 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value {
            get {
                return this.valueField2;
            }
            set {
                this.valueField2 = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 general product annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1GeneralAnnotationType {
        
        private productInformationType productInformationField;
        
        private downlinkInformationListType downlinkInformationListField;
        
        private orbitListType orbitListField;
        
        private attitudeListType attitudeListField;
        
        private rawDataAnalysisListType rawDataAnalysisListField;
        
        private replicaInformationListType replicaInformationListField;
        
        private noiseListType noiseListField;
        
        private terrainHeightListType terrainHeightListField;
        
        private azimuthFmRateListType azimuthFmRateListField;
        
        /// <remarks>
///General product information. This record describes some key characteristics of the product, the input data and the acquisition platform.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public productInformationType productInformation {
            get {
                return this.productInformationField;
            }
            set {
                this.productInformationField = value;
            }
        }
        
        /// <remarks>
///Downlink information list. This element contains a list of downlinkInformation records which contain information extracted and calculated from the input data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public downlinkInformationListType downlinkInformationList {
            get {
                return this.downlinkInformationListField;
            }
            set {
                this.downlinkInformationListField = value;
            }
        }
        
        /// <remarks>
///List of orbit information used by the IPF during processing. This list contains sets of orbit state vectors that are updated along azimuth. The values represent the interpolated values used by the IPF and are derived from the OSVs in the sub-commutated ancilliary data from the ISPs or from an input auxiliary orbit file.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public orbitListType orbitList {
            get {
                return this.orbitListField;
            }
            set {
                this.orbitListField = value;
            }
        }
        
        /// <remarks>
///List of attitude information used by the IPF during processing. This list contains sets of attitude data records that are updated along azimuth. The values represent the interpolated values used by the IPF and are derived from the sub-commutated ancillary data from the ISPs or from an input auxiliary attitude file.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public attitudeListType attitudeList {
            get {
                return this.attitudeListField;
            }
            set {
                this.attitudeListField = value;
            }
        }
        
        /// <remarks>
///Raw data analysis list. This element contains a list of rawDataAnalysis records which contain statistics collected from the input data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public rawDataAnalysisListType rawDataAnalysisList {
            get {
                return this.rawDataAnalysisListField;
            }
            set {
                this.rawDataAnalysisListField = value;
            }
        }
        
        /// <remarks>
///Replica information list. This element contains a list of replicaInformation records, which describe the reference replica and the reconstructed replicas created from the calibration pulses extracted from the downlink.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public replicaInformationListType replicaInformationList {
            get {
                return this.replicaInformationListField;
            }
            set {
                this.replicaInformationListField = value;
            }
        }
        
        /// <remarks>
///Noise list. This element is a list of noise records that contain the noise parameters derived from the noise ISPs. The list contains an entry for each noise update made along azimuth. If the noise list is empty, the nominal noise value in the instrument auxiliary data file will be used instead. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public noiseListType noiseList {
            get {
                return this.noiseListField;
            }
            set {
                this.noiseListField = value;
            }
        }
        
        /// <remarks>
///Terrain height list. This element is a list of terrainHeight records that contain the average terrain height at the given zero Doppler azimuth time. The actual terrain heights used by the IPF may represent bilinearly interpolated values from this list. The list contains an entry for each terrain height update made along azimuth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public terrainHeightListType terrainHeightList {
            get {
                return this.terrainHeightListField;
            }
            set {
                this.terrainHeightListField = value;
            }
        }
        
        /// <remarks>
///Azimuth Frequency Modulation (FM) rate list. This element is a list of azimuthFmRate records that contain the parameters needed to calculate the azimuth FM rate. The list contains an entry for each azimuth FM rate update made along azimuth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public azimuthFmRateListType azimuthFmRateList {
            get {
                return this.azimuthFmRateListField;
            }
            set {
                this.azimuthFmRateListField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for general product information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class productInformationType {
        
        private passDirectionType passField;
        
        private string timelinessCategoryField;
        
        private @double platformHeadingField;
        
        private projectionType projectionField;
        
        private @double rangeSamplingRateField;
        
        private @double radarFrequencyField;
        
        private @double azimuthSteeringRateField;
        
        /// <remarks>
///Direction of the orbit (ascending, descending) for the oldest image data in the product (the start of the product).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public passDirectionType pass {
            get {
                return this.passField;
            }
            set {
                this.passField = value;
            }
        }
        
        /// <remarks>
///Timeliness category under which the product was produced, i.e. time frame from the data acquisition (for the near real time categories) or from the satellite tasking to the product delivery to the end user.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string timelinessCategory {
            get {
                return this.timelinessCategoryField;
            }
            set {
                this.timelinessCategoryField = value;
            }
        }
        
        /// <remarks>
///Platform heading relative to North [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double platformHeading {
            get {
                return this.platformHeadingField;
            }
            set {
                this.platformHeadingField = value;
            }
        }
        
        /// <remarks>
///Projection of the image, either slant range or ground range.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public projectionType projection {
            get {
                return this.projectionField;
            }
            set {
                this.projectionField = value;
            }
        }
        
        /// <remarks>
///Range sample rate [Hz]. The value of this field is identical for all slices.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double rangeSamplingRate {
            get {
                return this.rangeSamplingRateField;
            }
            set {
                this.rangeSamplingRateField = value;
            }
        }
        
        /// <remarks>
///Radar frequency [Hz]. The value of this field is identical for all slices.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double radarFrequency {
            get {
                return this.radarFrequencyField;
            }
            set {
                this.radarFrequencyField = value;
            }
        }
        
        /// <remarks>
///Azimuth steering rate for IW and EW modes [degrees/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double azimuthSteeringRate {
            get {
                return this.azimuthSteeringRateField;
            }
            set {
                this.azimuthSteeringRateField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of the orbit pass direction values.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum passDirectionType {
        
        /// <remarks/>
        Ascending,
        
        /// <remarks/>
        Descending,
        
        /// <remarks/>
        ASCENDING,
        
        /// <remarks/>
        DESCENDING,
    }
    
    /// <remarks>
///Enumeration of the image projection.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum projectionType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Slant Range")]
        SlantRange,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ground Range")]
        GroundRange,
    }
    
    /// <remarks>
///List of downlink information records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downlinkInformationListType {
        
        private string countField1;
        
        private downlinkInformationType[] downlinkInformationField;
        
        /// <remarks>
///Number of downlinkInformation records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField1;
            }
            set {
                this.countField1 = value;
            }
        }
        
        /// <remarks>
///Downlink information. This record contains information about the data extracted/calculated from the input data, including values extracted from the ISP and data error counters. For individual scene and slice products there is one downlinkInformation record, except in the case of IW/EW GRD products, where there will be one record per swath. For assembled products the list contains all the downlinkInformation records for each slice included in the assembled product. For a minimum output slice length of 10s, a maximum segment length of 25 minutes and a maximum 5 swaths, the maximum number of records in the list is 750.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("downlinkInformation", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public downlinkInformationType[] downlinkInformation {
            get {
                return this.downlinkInformationField;
            }
            set {
                this.downlinkInformationField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for downlink information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downlinkInformationType {
        
        private swathType swathField1;
        
        private System.DateTime azimuthTimeField1;
        
        private System.DateTime firstLineSensingTimeField;
        
        private System.DateTime lastLineSensingTimeField;
        
        private @double prfField;
        
        private bitErrorCountType bitErrorCountField;
        
        private downlinkValuesType downlinkValuesField;
        
        /// <remarks>
///Swath from which this downlink information data was extracted.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField1;
            }
            set {
                this.swathField1 = value;
            }
        }
        
        /// <remarks>
///Zero Doppler azimuth time at which this set of downlink information applies [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField1;
            }
            set {
                this.azimuthTimeField1 = value;
            }
        }
        
        /// <remarks>
///Sensing time of first line of input data [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime firstLineSensingTime {
            get {
                return this.firstLineSensingTimeField;
            }
            set {
                this.firstLineSensingTimeField = value;
            }
        }
        
        /// <remarks>
///Sensing time of last line of input data [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastLineSensingTime {
            get {
                return this.lastLineSensingTimeField;
            }
            set {
                this.lastLineSensingTimeField = value;
            }
        }
        
        /// <remarks>
///Pulse repetition frequency (PRF) of the input raw data [Hz].  This is the inverse of the PRI extracted from the downlink for this swath.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double prf {
            get {
                return this.prfField;
            }
            set {
                this.prfField = value;
            }
        }
        
        /// <remarks>
///Error counters. This record contains the error counter for each field that is validated as the input source packets are analyzed.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bitErrorCountType bitErrorCount {
            get {
                return this.bitErrorCountField;
            }
            set {
                this.bitErrorCountField = value;
            }
        }
        
        /// <remarks>
///Downlink values.  This record contains values extracted directly from the Instrument Source Packets.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public downlinkValuesType downlinkValues {
            get {
                return this.downlinkValuesField;
            }
            set {
                this.downlinkValuesField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for downlink bit error counts.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bitErrorCountType {
        
        private uint32 numErrSyncMarkerField;
        
        private uint32 numErrDataTakeIdField;
        
        private uint32 numErrEccNumberField;
        
        private uint32 numErrTestModeField;
        
        private uint32 numErrRxChannelIdField;
        
        private uint32 numErrInstrumentConfigIdField;
        
        private uint32 numErrPacketCountField;
        
        private uint32 numErrPriCountField;
        
        private uint32 numErrSsbErrorFlagField;
        
        private uint32 numErrBaqModeField;
        
        private uint32 numErrBaqBlockLengthField;
        
        private uint32 numErrRangeDecimationField;
        
        private uint32 numErrRxGainField;
        
        private uint32 numErrTxRampRateField;
        
        private uint32 numErrTxPulseStartFrequencyField;
        
        private uint32 numErrRankField;
        
        private uint32 numErrPriField;
        
        private uint32 numErrSwstField;
        
        private uint32 numErrSwlField;
        
        private uint32 numErrPolarisationField;
        
        private uint32 numErrTempCompField;
        
        private uint32 numErrElevationBeamAddressField;
        
        private uint32 numErrAzimuthBeamAddressField;
        
        private uint32 numErrSasTestModeField;
        
        private uint32 numErrCalTypeField;
        
        private uint32 numErrCalibrationBeamAddressField;
        
        private uint32 numErrCalModeField;
        
        private uint32 numErrTxPulseNumberField;
        
        private uint32 numErrSignalTypeField;
        
        private uint32 numErrSwapFlagField;
        
        private uint32 numErrSwathNumberField;
        
        private uint32 numErrNumberOfQuadsField;
        
        private uint32 numIspHeaderErrorsField;
        
        /// <remarks>
///Number of errors detected in the sync marker field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSyncMarker {
            get {
                return this.numErrSyncMarkerField;
            }
            set {
                this.numErrSyncMarkerField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the data take identifier field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrDataTakeId {
            get {
                return this.numErrDataTakeIdField;
            }
            set {
                this.numErrDataTakeIdField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the ECC number field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrEccNumber {
            get {
                return this.numErrEccNumberField;
            }
            set {
                this.numErrEccNumberField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the test mode field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrTestMode {
            get {
                return this.numErrTestModeField;
            }
            set {
                this.numErrTestModeField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the Rx channel identifier field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrRxChannelId {
            get {
                return this.numErrRxChannelIdField;
            }
            set {
                this.numErrRxChannelIdField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the instrument configuration identifier field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrInstrumentConfigId {
            get {
                return this.numErrInstrumentConfigIdField;
            }
            set {
                this.numErrInstrumentConfigIdField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the space packet count field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrPacketCount {
            get {
                return this.numErrPacketCountField;
            }
            set {
                this.numErrPacketCountField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the PRI count field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrPriCount {
            get {
                return this.numErrPriCountField;
            }
            set {
                this.numErrPriCountField = value;
            }
        }
        
        /// <remarks>
///Number of packets in which the SSB Error Flag is set to true.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSsbErrorFlag {
            get {
                return this.numErrSsbErrorFlagField;
            }
            set {
                this.numErrSsbErrorFlagField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the BAQ mode field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrBaqMode {
            get {
                return this.numErrBaqModeField;
            }
            set {
                this.numErrBaqModeField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the BAQ block length field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrBaqBlockLength {
            get {
                return this.numErrBaqBlockLengthField;
            }
            set {
                this.numErrBaqBlockLengthField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the range decimation field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrRangeDecimation {
            get {
                return this.numErrRangeDecimationField;
            }
            set {
                this.numErrRangeDecimationField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the Rx gain field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrRxGain {
            get {
                return this.numErrRxGainField;
            }
            set {
                this.numErrRxGainField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the Tx ramp rate field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrTxRampRate {
            get {
                return this.numErrTxRampRateField;
            }
            set {
                this.numErrTxRampRateField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the Tx pulse start frequency field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrTxPulseStartFrequency {
            get {
                return this.numErrTxPulseStartFrequencyField;
            }
            set {
                this.numErrTxPulseStartFrequencyField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the rank field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrRank {
            get {
                return this.numErrRankField;
            }
            set {
                this.numErrRankField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the PRI code field
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrPri {
            get {
                return this.numErrPriField;
            }
            set {
                this.numErrPriField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the sampling window start time field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSwst {
            get {
                return this.numErrSwstField;
            }
            set {
                this.numErrSwstField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the sampling window length (SWL) field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSwl {
            get {
                return this.numErrSwlField;
            }
            set {
                this.numErrSwlField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the polarisation field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrPolarisation {
            get {
                return this.numErrPolarisationField;
            }
            set {
                this.numErrPolarisationField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the temperature compensation field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrTempComp {
            get {
                return this.numErrTempCompField;
            }
            set {
                this.numErrTempCompField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the elevation beam address field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrElevationBeamAddress {
            get {
                return this.numErrElevationBeamAddressField;
            }
            set {
                this.numErrElevationBeamAddressField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the azimuth beam address field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrAzimuthBeamAddress {
            get {
                return this.numErrAzimuthBeamAddressField;
            }
            set {
                this.numErrAzimuthBeamAddressField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the SAS test mode field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSasTestMode {
            get {
                return this.numErrSasTestModeField;
            }
            set {
                this.numErrSasTestModeField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the calibration operation type field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrCalType {
            get {
                return this.numErrCalTypeField;
            }
            set {
                this.numErrCalTypeField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the calibration beam address field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrCalibrationBeamAddress {
            get {
                return this.numErrCalibrationBeamAddressField;
            }
            set {
                this.numErrCalibrationBeamAddressField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the calibration mode field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrCalMode {
            get {
                return this.numErrCalModeField;
            }
            set {
                this.numErrCalModeField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the Tx pulse number field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrTxPulseNumber {
            get {
                return this.numErrTxPulseNumberField;
            }
            set {
                this.numErrTxPulseNumberField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the signal type field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSignalType {
            get {
                return this.numErrSignalTypeField;
            }
            set {
                this.numErrSignalTypeField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the swap flag field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSwapFlag {
            get {
                return this.numErrSwapFlagField;
            }
            set {
                this.numErrSwapFlagField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the swath number field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrSwathNumber {
            get {
                return this.numErrSwathNumberField;
            }
            set {
                this.numErrSwathNumberField = value;
            }
        }
        
        /// <remarks>
///Number of errors detected in the number of quads field.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numErrNumberOfQuads {
            get {
                return this.numErrNumberOfQuadsField;
            }
            set {
                this.numErrNumberOfQuadsField = value;
            }
        }
        
        /// <remarks>
///Total number of errors detected in ISP headers.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numIspHeaderErrors {
            get {
                return this.numIspHeaderErrorsField;
            }
            set {
                this.numIspHeaderErrorsField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for downlink values.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downlinkValuesType {
        
        private @double priField;
        
        private uint16 rankField;
        
        private uint16 dataTakeIdField;
        
        private uint16 eccNumberField;
        
        private uint16 rxChannelIdField;
        
        private uint32 instrumentConfigIdField;
        
        private dataFormatType dataFormatField;
        
        private rangeDecimationType rangeDecimationField;
        
        private @double rxGainField;
        
        private @double txPulseLengthField;
        
        private @double txPulseStartFrequencyField;
        
        private @double txPulseRampRateField;
        
        private string swathNumberField;
        
        private swlListType swlListField;
        
        private swstListType swstListField;
        
        private pointingStatusListType pointingStatusListField;
        
        /// <remarks>
///Pulse Repetition Interval [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double pri {
            get {
                return this.priField;
            }
            set {
                this.priField = value;
            }
        }
        
        /// <remarks>
///The number of PRI between transmitted pulse and return echo.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint16 rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks>
///Data take identifier.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint16 dataTakeId {
            get {
                return this.dataTakeIdField;
            }
            set {
                this.dataTakeIdField = value;
            }
        }
        
        /// <remarks>
///The ECC number of the measurement or test mode.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint16 eccNumber {
            get {
                return this.eccNumberField;
            }
            set {
                this.eccNumberField = value;
            }
        }
        
        /// <remarks>
///Receive channel identifier.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint16 rxChannelId {
            get {
                return this.rxChannelIdField;
            }
            set {
                this.rxChannelIdField = value;
            }
        }
        
        /// <remarks>
///Instrument configuration identifier.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 instrumentConfigId {
            get {
                return this.instrumentConfigIdField;
            }
            set {
                this.instrumentConfigIdField = value;
            }
        }
        
        /// <remarks>
///Data format for instrument samples. There is one element corresponding to the data format for each packet type in the segment.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dataFormatType dataFormat {
            get {
                return this.dataFormatField;
            }
            set {
                this.dataFormatField = value;
            }
        }
        
        /// <remarks>
///Decimation of the SAR data in the sampling window according to the needed mode bandwidth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public rangeDecimationType rangeDecimation {
            get {
                return this.rangeDecimationField;
            }
            set {
                this.rangeDecimationField = value;
            }
        }
        
        /// <remarks>
///Applied value of the commandable Rx attenuation in the receiver channel of the SES.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double rxGain {
            get {
                return this.rxGainField;
            }
            set {
                this.rxGainField = value;
            }
        }
        
        /// <remarks>
///Transmit pulse length [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double txPulseLength {
            get {
                return this.txPulseLengthField;
            }
            set {
                this.txPulseLengthField = value;
            }
        }
        
        /// <remarks>
///Starting frequency of the transmit pulse [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double txPulseStartFrequency {
            get {
                return this.txPulseStartFrequencyField;
            }
            set {
                this.txPulseStartFrequencyField = value;
            }
        }
        
        /// <remarks>
///The linear FM rate at which the frequency changes over the pulse duration [Hz/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double txPulseRampRate {
            get {
                return this.txPulseRampRateField;
            }
            set {
                this.txPulseRampRateField = value;
            }
        }
        
        /// <remarks>
///SPPDU swath number identifier
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="nonNegativeInteger")]
        public string swathNumber {
            get {
                return this.swathNumberField;
            }
            set {
                this.swathNumberField = value;
            }
        }
        
        /// <remarks>
///List of sampling window lengths.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swlListType swlList {
            get {
                return this.swlListField;
            }
            set {
                this.swlListField = value;
            }
        }
        
        /// <remarks>
///List of sampling window start time changes.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swstListType swstList {
            get {
                return this.swstListField;
            }
            set {
                this.swstListField = value;
            }
        }
        
        /// <remarks>
///List of pointing status changes.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public pointingStatusListType pointingStatusList {
            get {
                return this.pointingStatusListField;
            }
            set {
                this.pointingStatusListField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for downlink data compression information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dataFormatType {
        
        private uint16 baqBlockLengthField;
        
        private dataFormatModeType echoFormatField;
        
        private dataFormatModeType noiseFormatField;
        
        private dataFormatModeType calibrationFormatField;
        
        private @double meanBitRateField;
        
        /// <remarks>
///BAQ block length for all packets.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint16 baqBlockLength {
            get {
                return this.baqBlockLengthField;
            }
            set {
                this.baqBlockLengthField = value;
            }
        }
        
        /// <remarks>
///Data format of echo packets.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dataFormatModeType echoFormat {
            get {
                return this.echoFormatField;
            }
            set {
                this.echoFormatField = value;
            }
        }
        
        /// <remarks>
///Data format of noise packets.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dataFormatModeType noiseFormat {
            get {
                return this.noiseFormatField;
            }
            set {
                this.noiseFormatField = value;
            }
        }
        
        /// <remarks>
///Data format of calibration packets.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dataFormatModeType calibrationFormat {
            get {
                return this.calibrationFormatField;
            }
            set {
                this.calibrationFormatField = value;
            }
        }
        
        /// <remarks>
///The calculated mean bit rate of FDBAQ decompression for the entire segment [Mbps].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double meanBitRate {
            get {
                return this.meanBitRateField;
            }
            set {
                this.meanBitRateField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of compression method names.  This enumeration is a consolidated list from the Sentinel-1 SPPDU document and the ENVISAT Product Specification.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum dataFormatModeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Full 8 Bit")]
        Full8Bit,
        
        /// <remarks/>
        SM,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("FBAQ 2 Bit")]
        FBAQ2Bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("FBAQ 3 Bit")]
        FBAQ3Bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("FBAQ 4 Bit")]
        FBAQ4Bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("FBAQ 5 Bit")]
        FBAQ5Bit,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        FDBAQ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("BAQ 3 Bit")]
        BAQ3Bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("BAQ 4 Bit")]
        BAQ4Bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("BAQ 5 Bit")]
        BAQ5Bit,
        
        /// <remarks/>
        Decimation,
        
        /// <remarks/>
        Bypass,
    }
    
    /// <remarks>
///Annotation record to record the decimation of the radar data.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rangeDecimationType {
        
        private @double decimationFilterBandwidthField;
        
        private @double samplingFrequencyAfterDecimationField;
        
        private uint32 filterLengthField;
        
        /// <remarks>
///Filter bandwidth used to decimate the SAR signal data [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double decimationFilterBandwidth {
            get {
                return this.decimationFilterBandwidthField;
            }
            set {
                this.decimationFilterBandwidthField = value;
            }
        }
        
        /// <remarks>
///Sampling frequency of the SAR signal data after decimation [Hz].  This frequency is equivalent to the to the sampling frequency before decimation multiplied by the decimation ratio.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double samplingFrequencyAfterDecimation {
            get {
                return this.samplingFrequencyAfterDecimationField;
            }
            set {
                this.samplingFrequencyAfterDecimationField = value;
            }
        }
        
        /// <remarks>
///Length of the decimation filter [samples].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 filterLength {
            get {
                return this.filterLengthField;
            }
            set {
                this.filterLengthField = value;
            }
        }
    }
    
    /// <remarks>
///List of sampling window lengths.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swlListType {
        
        private string countField2;
        
        private swlType[] swlField;
        
        /// <remarks>
///Number of SWL records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField2;
            }
            set {
                this.countField2 = value;
            }
        }
        
        /// <remarks>
///Sampling window length record. This record holds the SWL for the given zero Doppler azimuth time. For a SWL update rate of approximately 8s and a maximum segment length of 25 minutes, the maximum number of records in the list is 200. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("swl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swlType[] swl {
            get {
                return this.swlField;
            }
            set {
                this.swlField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for sampling window start time.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swlType {
        
        private System.DateTime azimuthTimeField2;
        
        private @double valueField3;
        
        /// <remarks>
///Zero Doppler azimuth time of sampling window start change [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField2;
            }
            set {
                this.azimuthTimeField2 = value;
            }
        }
        
        /// <remarks>
///Sampling window length [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double value {
            get {
                return this.valueField3;
            }
            set {
                this.valueField3 = value;
            }
        }
    }
    
    /// <remarks>
///List of sampling window start time changes.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swstListType {
        
        private string countField3;
        
        private swstType[] swstField;
        
        /// <remarks>
///Number of SWST records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField3;
            }
            set {
                this.countField3 = value;
            }
        }
        
        /// <remarks>
///SWST record. This record holds the SWST for the given zero Doppler azimuth time. For a SWST update rate of approximately 8s and a maximum segment length of 25 minutes, the maximum number of records in the list is 200.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("swst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swstType[] swst {
            get {
                return this.swstField;
            }
            set {
                this.swstField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for sampling window start time.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swstType {
        
        private System.DateTime azimuthTimeField3;
        
        private @double valueField4;
        
        /// <remarks>
///Zero Doppler azimuth time of sampling window start change [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField3;
            }
            set {
                this.azimuthTimeField3 = value;
            }
        }
        
        /// <remarks>
///Sampling window start time [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double value {
            get {
                return this.valueField4;
            }
            set {
                this.valueField4 = value;
            }
        }
    }
    
    /// <remarks>
///List of pointing status changes.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class pointingStatusListType {
        
        private string countField4;
        
        private pointingStatusType[] pointingStatusField;
        
        /// <remarks>
///Number of pointing status changes in the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField4;
            }
            set {
                this.countField4 = value;
            }
        }
        
        /// <remarks>
///Pointing status record. This record holds the pointing status for the given zero Doppler azimuth time.  With a minimum orbit/attitude update rate of of 1s and a maximum product length of 25 minutes, the maximum size of this list is 1500 elements.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("pointingStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public pointingStatusType[] pointingStatus {
            get {
                return this.pointingStatusField;
            }
            set {
                this.pointingStatusField = value;
            }
        }
    }
    
    /// <remarks>
///Pointing status as reported in the S/C ancillary data from the downlink. Note: The information in this record is reported but not interpreted by the IPF.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class pointingStatusType {
        
        private System.DateTime azimuthTimeField4;
        
        private aocsOpModeType aocsOpModeField;
        
        private bool rollErrorFlagField;
        
        private bool pitchErrorFlagField;
        
        private bool yawErrorFlagField;
        
        /// <remarks>
///Zero Doppler azimuth time of the pointing status change [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField4;
            }
            set {
                this.azimuthTimeField4 = value;
            }
        }
        
        /// <remarks>
///AOCS operational mode.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public aocsOpModeType aocsOpMode {
            get {
                return this.aocsOpModeField;
            }
            set {
                this.aocsOpModeField = value;
            }
        }
        
        /// <remarks>
///Roll error status. Set to false when the roll axis is fine pointed and set to true when the roll axis is degraded.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool rollErrorFlag {
            get {
                return this.rollErrorFlagField;
            }
            set {
                this.rollErrorFlagField = value;
            }
        }
        
        /// <remarks>
///Pitch error status. Set to false when the pitch axis is fine pointed and set to true when the pitch axis is degraded.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool pitchErrorFlag {
            get {
                return this.pitchErrorFlagField;
            }
            set {
                this.pitchErrorFlagField = value;
            }
        }
        
        /// <remarks>
///Yaw error status. Set to false when the yaw axis is fine pointed and set to true when the yaw axis is degraded.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool yawErrorFlag {
            get {
                return this.yawErrorFlagField;
            }
            set {
                this.yawErrorFlagField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of the available AOCS operational mode from the pointing status in the downlink.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum aocsOpModeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("No Mode")]
        NoMode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Normal Pointing Mode")]
        NormalPointingMode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Orbit Control Mode")]
        OrbitControlMode,
    }
    
    /// <remarks>
///List of orbit state vector annotation records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class orbitListType {
        
        private string countField5;
        
        private orbitType[] orbitField;
        
        /// <remarks>
///Length of the orbit vector list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField5;
            }
            set {
                this.countField5 = value;
            }
        }
        
        /// <remarks>
///Orbit state vector record. This record contains a position vector and a velocity vector which together describe the orbit state of the platform at the annotated time. With a minimum orbit/attitude update rate of of 1s and a maximum product length of 25 minutes, the maximum size of this list is 1500 elements.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("orbit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public orbitType[] orbit {
            get {
                return this.orbitField;
            }
            set {
                this.orbitField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for orbit state vector information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class orbitType {
        
        private System.DateTime timeField;
        
        private referenceFrameType frameField;
        
        private positionType positionField;
        
        private velocityType velocityField;
        
        /// <remarks>
///Timestamp at which orbit state vectors apply [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks>
///Reference frame of the orbit state data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public referenceFrameType frame {
            get {
                return this.frameField;
            }
            set {
                this.frameField = value;
            }
        }
        
        /// <remarks>
///Position vector record. This record cotains the platform position data with respect to the Earth-fixed reference frame.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public positionType position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks>
///Velocity vector record. his record cotains the platform velocity data with respect to the Earth-fixed reference frame.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public velocityType velocity {
            get {
                return this.velocityField;
            }
            set {
                this.velocityField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of valid reference frames for orbit and attitude data.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum referenceFrameType {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        Galactic,
        
        /// <remarks/>
        BM1950,
        
        /// <remarks/>
        BM2000,
        
        /// <remarks/>
        HM2000,
        
        /// <remarks/>
        GM2000,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mean Of Date")]
        MeanOfDate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("True Of Date")]
        TrueOfDate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pseudo True Of Date")]
        PseudoTrueOfDate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Earth Fixed")]
        EarthFixed,
        
        /// <remarks/>
        Topocentric,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Satellite Orbital")]
        SatelliteOrbital,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Satellite Nominal")]
        SatelliteNominal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Satellite Attitude")]
        SatelliteAttitude,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Instrument Attitude")]
        InstrumentAttitude,
    }
    
    /// <remarks>
///Position vector.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class positionType {
        
        private @double xField;
        
        private @double yField;
        
        private @double zField;
        
        /// <remarks>
///X component of position vector [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks>
///Y component of position vector [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        /// <remarks>
///Z component of position vector [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double z {
            get {
                return this.zField;
            }
            set {
                this.zField = value;
            }
        }
    }
    
    /// <remarks>
///Velocity vector.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class velocityType {
        
        private @double xField1;
        
        private @double yField1;
        
        private @double zField1;
        
        /// <remarks>
///X component of velocity vector [m/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double x {
            get {
                return this.xField1;
            }
            set {
                this.xField1 = value;
            }
        }
        
        /// <remarks>
///Y component of velocity vector [m/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double y {
            get {
                return this.yField1;
            }
            set {
                this.yField1 = value;
            }
        }
        
        /// <remarks>
///Z component of velocity vector [m/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double z {
            get {
                return this.zField1;
            }
            set {
                this.zField1 = value;
            }
        }
    }
    
    /// <remarks>
///List of attitude and angular velocity annotation records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attitudeListType {
        
        private string countField6;
        
        private attitudeType[] attitudeField;
        
        /// <remarks>
///Length of the attitude list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField6;
            }
            set {
                this.countField6 = value;
            }
        }
        
        /// <remarks>
///Attitude data record. This record contains the attitude quaternions and an angular velocity vector which together describe the attitude state of the platform at the annotated time. With a minimum orbit/attitude update rate of of 1s and a maximum product length of 25 minutes, the maximum size of this list is 1500 elements.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("attitude", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public attitudeType[] attitude {
            get {
                return this.attitudeField;
            }
            set {
                this.attitudeField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for attitude quaternion.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attitudeType {
        
        private System.DateTime timeField1;
        
        private referenceFrameType frameField1;
        
        private @float q0Field;
        
        private @float q1Field;
        
        private @float q2Field;
        
        private @float q3Field;
        
        private @double wxField;
        
        private @double wyField;
        
        private @double wzField;
        
        private @double rollField;
        
        private @double pitchField;
        
        private @double yawField;
        
        /// <remarks>
///Timestamp - as extracted from ancillary attitude data - to which attitude data applies [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime time {
            get {
                return this.timeField1;
            }
            set {
                this.timeField1 = value;
            }
        }
        
        /// <remarks>
///Reference frame of the attitude data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public referenceFrameType frame {
            get {
                return this.frameField1;
            }
            set {
                this.frameField1 = value;
            }
        }
        
        /// <remarks>
///Q0 attitude quaternion as extracted from ancillary attitude data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float q0 {
            get {
                return this.q0Field;
            }
            set {
                this.q0Field = value;
            }
        }
        
        /// <remarks>
///Q1 attitude quaternion as extracted from ancillary attitude data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float q1 {
            get {
                return this.q1Field;
            }
            set {
                this.q1Field = value;
            }
        }
        
        /// <remarks>
///Q2 attitude quaternion as extracted from ancillary attitude data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float q2 {
            get {
                return this.q2Field;
            }
            set {
                this.q2Field = value;
            }
        }
        
        /// <remarks>
///Q3 attitude quaternion as extracted from ancillary attitude data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float q3 {
            get {
                return this.q3Field;
            }
            set {
                this.q3Field = value;
            }
        }
        
        /// <remarks>
///X component of angular velocity vector as extracted from ancillary attitude data [degrees/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double wx {
            get {
                return this.wxField;
            }
            set {
                this.wxField = value;
            }
        }
        
        /// <remarks>
///Y component of angular velocity vector as extracted from ancillary attitude data [degrees/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double wy {
            get {
                return this.wyField;
            }
            set {
                this.wyField = value;
            }
        }
        
        /// <remarks>
///Z component of angular velocity vector as extracted from ancillary attitude data [degrees/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double wz {
            get {
                return this.wzField;
            }
            set {
                this.wzField = value;
            }
        }
        
        /// <remarks>
///Platform roll calculated from ancillary attitude data [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double roll {
            get {
                return this.rollField;
            }
            set {
                this.rollField = value;
            }
        }
        
        /// <remarks>
///Platform pitch calculated from ancillary attitude data [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double pitch {
            get {
                return this.pitchField;
            }
            set {
                this.pitchField = value;
            }
        }
        
        /// <remarks>
///Platform yaw calculated from ancillary attitude data [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double yaw {
            get {
                return this.yawField;
            }
            set {
                this.yawField = value;
            }
        }
    }
    
    /// <remarks>
///List of RDA information records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rawDataAnalysisListType {
        
        private string countField7;
        
        private rawDataAnalysisType[] rawDataAnalysisField;
        
        /// <remarks>
///Number of rawDataAnalysis records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField7;
            }
            set {
                this.countField7 = value;
            }
        }
        
        /// <remarks>
///Raw data analysis information. This record contains data statistics collected from sampling a subset of the raw input data. It contains the values calculated for both the I and Q channels. For individual scene and slice products there is one rawDataAnalysis record except in the case of IW/EW GRD products, where there will be one record per swath. For assembled products the list contains all the downlinkInformation records for each slice included in the assembled product. For a minimum output slice length of 10s, a maximum segment length of 25 minutes and a maximum 5 swaths, the maximum number of records in the list is 750.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("rawDataAnalysis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public rawDataAnalysisType[] rawDataAnalysis {
            get {
                return this.rawDataAnalysisField;
            }
            set {
                this.rawDataAnalysisField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for raw data analysis information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rawDataAnalysisType {
        
        private System.DateTime azimuthTimeField5;
        
        private @double iBiasField1;
        
        private @double qBiasField1;
        
        private @double iqQuadratureDepartureField1;
        
        private @double iqGainImbalanceField1;
        
        private rawDataAnalysisSupportType supportField;
        
        /// <remarks>
///Zero Doppler azimuth time at which this set of raw data analysis values apply [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField5;
            }
            set {
                this.azimuthTimeField5 = value;
            }
        }
        
        /// <remarks>
///Calculated I bias.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iBias {
            get {
                return this.iBiasField1;
            }
            set {
                this.iBiasField1 = value;
            }
        }
        
        /// <remarks>
///Calculated Q bias.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double qBias {
            get {
                return this.qBiasField1;
            }
            set {
                this.qBiasField1 = value;
            }
        }
        
        /// <remarks>
///Calculated I/Q quadrature departure.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqQuadratureDeparture {
            get {
                return this.iqQuadratureDepartureField1;
            }
            set {
                this.iqQuadratureDepartureField1 = value;
            }
        }
        
        /// <remarks>
///Calculated I/Q gain imbalance.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqGainImbalance {
            get {
                return this.iqGainImbalanceField1;
            }
            set {
                this.iqGainImbalanceField1 = value;
            }
        }
        
        /// <remarks>
///Supporting RDA values.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public rawDataAnalysisSupportType support {
            get {
                return this.supportField;
            }
            set {
                this.supportField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for raw data analysis information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rawDataAnalysisSupportType {
        
        private @double iBiasUpperBoundField;
        
        private @double iBiasLowerBoundField;
        
        private @double qBiasUpperBoundField;
        
        private @double qBiasLowerBoundField;
        
        private @double iqGainUpperBoundField;
        
        private @double iqGainLowerBoundField;
        
        private @double iqQuadratureDepartureUpperBoundField;
        
        private @double iqQuadratureDepartureLowerBoundField;
        
        private @double iBiasUsedForCorrectionField;
        
        private @double qBiasUsedForCorrectionField;
        
        private @double iqGainImbalanceUsedForCorrectionField;
        
        private @double iqQuadratureDepartureUsedForCorrectionField;
        
        /// <remarks>
///I bias upper bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iBiasUpperBound {
            get {
                return this.iBiasUpperBoundField;
            }
            set {
                this.iBiasUpperBoundField = value;
            }
        }
        
        /// <remarks>
///I bias lower bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iBiasLowerBound {
            get {
                return this.iBiasLowerBoundField;
            }
            set {
                this.iBiasLowerBoundField = value;
            }
        }
        
        /// <remarks>
///Q bias upper bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double qBiasUpperBound {
            get {
                return this.qBiasUpperBoundField;
            }
            set {
                this.qBiasUpperBoundField = value;
            }
        }
        
        /// <remarks>
///Q bias lower bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double qBiasLowerBound {
            get {
                return this.qBiasLowerBoundField;
            }
            set {
                this.qBiasLowerBoundField = value;
            }
        }
        
        /// <remarks>
///I/Q gain upper bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqGainUpperBound {
            get {
                return this.iqGainUpperBoundField;
            }
            set {
                this.iqGainUpperBoundField = value;
            }
        }
        
        /// <remarks>
///I/Q gain lower bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqGainLowerBound {
            get {
                return this.iqGainLowerBoundField;
            }
            set {
                this.iqGainLowerBoundField = value;
            }
        }
        
        /// <remarks>
///I/Q quadrature departure upper bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqQuadratureDepartureUpperBound {
            get {
                return this.iqQuadratureDepartureUpperBoundField;
            }
            set {
                this.iqQuadratureDepartureUpperBoundField = value;
            }
        }
        
        /// <remarks>
///I/Q quadrature departure lower bound.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqQuadratureDepartureLowerBound {
            get {
                return this.iqQuadratureDepartureLowerBoundField;
            }
            set {
                this.iqQuadratureDepartureLowerBoundField = value;
            }
        }
        
        /// <remarks>
///I channel bias used for correction (may be different from the calculated bias).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iBiasUsedForCorrection {
            get {
                return this.iBiasUsedForCorrectionField;
            }
            set {
                this.iBiasUsedForCorrectionField = value;
            }
        }
        
        /// <remarks>
///Q channel bias used for correction (may be different from the calculated bias).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double qBiasUsedForCorrection {
            get {
                return this.qBiasUsedForCorrectionField;
            }
            set {
                this.qBiasUsedForCorrectionField = value;
            }
        }
        
        /// <remarks>
///I/Q gain imbalance used for correction (may be different from the calculated gain).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqGainImbalanceUsedForCorrection {
            get {
                return this.iqGainImbalanceUsedForCorrectionField;
            }
            set {
                this.iqGainImbalanceUsedForCorrectionField = value;
            }
        }
        
        /// <remarks>
///I/Q quadrature departure used for correction (may be different from the calculated quadrature departure).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double iqQuadratureDepartureUsedForCorrection {
            get {
                return this.iqQuadratureDepartureUsedForCorrectionField;
            }
            set {
                this.iqQuadratureDepartureUsedForCorrectionField = value;
            }
        }
    }
    
    /// <remarks>
///List of replica information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class replicaInformationListType {
        
        private string countField8;
        
        private replicaInformationType[] replicaInformationField;
        
        /// <remarks>
///Number of replicaInformation records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField8;
            }
            set {
                this.countField8 = value;
            }
        }
        
        /// <remarks>
///Replica information. This record contains information about the reference and reconstructed replicas.  There will be one replica information record per ADS, except for IW/EW GRD products which will contain one per swath.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("replicaInformation", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public replicaInformationType[] replicaInformation {
            get {
                return this.replicaInformationField;
            }
            set {
                this.replicaInformationField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for replic information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class replicaInformationType {
        
        private swathType swathField2;
        
        private referenceReplicaType referenceReplicaField;
        
        private replicaListType replicaListField;
        
        /// <remarks>
///Swath to which this replica information applies.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField2;
            }
            set {
                this.swathField2 = value;
            }
        }
        
        /// <remarks>
///Reference replica record. This record contains information about the reference replica that was used by the IPF during processing. When the extracted replica is used for processing the information in this record comes from the calibration pulses at the nominal imaging bandwidth. When the nominal replica is used for processing the information in this record comes directly from the AUX_INS data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public referenceReplicaType referenceReplica {
            get {
                return this.referenceReplicaField;
            }
            set {
                this.referenceReplicaField = value;
            }
        }
        
        /// <remarks>
///Replica list. This element contains a list of the reconstructed replicas calculated from the PG calibration pulses at 100 MHz bandwidth extracted from the downlink. The list contains an entry for each replica update made along azimuth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public replicaListType replicaList {
            get {
                return this.replicaListField;
            }
            set {
                this.replicaListField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for the reference replica
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class referenceReplicaType {
        
        private System.DateTime azimuthTimeField6;
        
        private chirpSourceType chirpSourceField;
        
        private pgSourceType pgSourceField;
        
        private floatCoefficientArray amplitudeCoefficientsField;
        
        private floatCoefficientArray phaseCoefficientsField;
        
        private @float timeDelayField;
        
        private complex gainField;
        
        /// <remarks>
///Azimuth sensing time of the calibration packet that the reference replica was created from.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField6;
            }
            set {
                this.azimuthTimeField6 = value;
            }
        }
        
        /// <remarks>
///Source of the reference replica: Nominal or Extracted.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public chirpSourceType chirpSource {
            get {
                return this.chirpSourceField;
            }
            set {
                this.chirpSourceField = value;
            }
        }
        
        /// <remarks>
///PG source used during processing (Model or Extracted).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public pgSourceType pgSource {
            get {
                return this.pgSourceField;
            }
            set {
                this.pgSourceField = value;
            }
        }
        
        /// <remarks>
///Number of replica polynomial coefficients.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public floatCoefficientArray amplitudeCoefficients {
            get {
                return this.amplitudeCoefficientsField;
            }
            set {
                this.amplitudeCoefficientsField = value;
            }
        }
        
        /// <remarks>
///Reference replica coefficients. The element contains numCofficients double precision floating point values separated by spaces.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public floatCoefficientArray phaseCoefficients {
            get {
                return this.phaseCoefficientsField;
            }
            set {
                this.phaseCoefficientsField = value;
            }
        }
        
        /// <remarks>
///Internal time delay [s] representing the average deviation of the replica location from the location of the transmitted pulse. If the chirpSource is Nominal, then this value is filled with the internalTimeDelay parameter from the AUX_INS file. If the chirpSource is Extracted, then this value is filled with the average internal time delay calculated across all extracted PG replicas reconstructed from the calibration pulses at 100 MHz bandwidth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float timeDelay {
            get {
                return this.timeDelayField;
            }
            set {
                this.timeDelayField = value;
            }
        }
        
        /// <remarks>
///Complex gain to be applied to the range match filter to compensate for the amplitude and phase differences between the two channels in dual polarization data.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public complex gain {
            get {
                return this.gainField;
            }
            set {
                this.gainField = value;
            }
        }
    }
    
    /// <remarks>
///String containing an array of float coefficient values separated by spaces. The mandatory count attribute defines the number of elements in the array.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class floatCoefficientArray {
        
        private string countField9;
        
        private string unitsField3;
        
        private string valueField5;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField9;
            }
            set {
                this.countField9 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField3;
            }
            set {
                this.unitsField3 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField5;
            }
            set {
                this.valueField5 = value;
            }
        }
    }
    
    /// <remarks>
///List of reconstructed replica records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class replicaListType {
        
        private string countField10;
        
        private replicaType[] replicaField;
        
        /// <remarks>
///Number of replica records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField10;
            }
            set {
                this.countField10 = value;
            }
        }
        
        /// <remarks>
///PG chirp replica parameters derived from the calibration pulses at 100 MHz bandwidth, With an average calibration cycle interval of 5s and a maximum product length of 25 minutes, the maximum size of this list is 300 elements. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("replica", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public replicaType[] replica {
            get {
                return this.replicaField;
            }
            set {
                this.replicaField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for reconstructed replicas.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class replicaType {
        
        private System.DateTime azimuthTimeField7;
        
        private @float crossCorrelationBandwidthField;
        
        private @float crossCorrelationPslrField;
        
        private @float crossCorrelationIslrField;
        
        private @float crossCorrelationPeakLocationField;
        
        private bool reconstructedReplicaValidFlagField;
        
        private @float pgProductAmplitudeField;
        
        private @float pgProductPhaseField;
        
        private @float modelPgProductAmplitudeField;
        
        private @float modelPgProductPhaseField;
        
        private bool relativePgProductValidFlagField;
        
        private bool absolutePgProductValidFlagField;
        
        private @float internalTimeDelayField;
        
        /// <remarks>
///Zero Doppler azimuth time in azimuth at which replica applies [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField7;
            }
            set {
                this.azimuthTimeField7 = value;
            }
        }
        
        /// <remarks>
///3-dB pulse width of chirp replica cross-correlation function between the reconstructed replica and the  nominal replica [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float crossCorrelationBandwidth {
            get {
                return this.crossCorrelationBandwidthField;
            }
            set {
                this.crossCorrelationBandwidthField = value;
            }
        }
        
        /// <remarks>
///Peak Side Lobe Ratio (PSLR) of replica cross-correlation function between the reconstructed replica and the nominal replica [dB].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float crossCorrelationPslr {
            get {
                return this.crossCorrelationPslrField;
            }
            set {
                this.crossCorrelationPslrField = value;
            }
        }
        
        /// <remarks>
///Integrated Side Lobe Ratio (ISLR) of cross-correlation function between the reconstructed replica and the nominal replica [dB].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float crossCorrelationIslr {
            get {
                return this.crossCorrelationIslrField;
            }
            set {
                this.crossCorrelationIslrField = value;
            }
        }
        
        /// <remarks>
///Peak location of cross-correlation function between the reconstructed replica and the nominal replica [samples].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float crossCorrelationPeakLocation {
            get {
                return this.crossCorrelationPeakLocationField;
            }
            set {
                this.crossCorrelationPeakLocationField = value;
            }
        }
        
        /// <remarks>
///Indicates if the cross-correlation bandwidth, PSLR and ISLR of the reconstructed replica are valid, i.e. within the corresponding configured quality thresholds from the auxiliary data. Set to true if valid; or, false otherwise.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool reconstructedReplicaValidFlag {
            get {
                return this.reconstructedReplicaValidFlagField;
            }
            set {
                this.reconstructedReplicaValidFlagField = value;
            }
        }
        
        /// <remarks>
///Amplitude of the PG product derived from this replica. The amplitude value annotated for the PG product is:
///abs(1/PG * meanRxCalPow(swath1)/meanRxCalPow(swathn))
///Where:
///- abs() is the absolute value function for a complex number;
///- meanRxCalPow(swath1) is the mean RX calibration power of swath 1 calculated according to [R-14];
///- meanRxCalPow(swathn) is the mean RX calibration power of the current swath calculated according to [R-14].
///PG product values can only be calculated for products that have at least one valid extracted reconstructed replica. If no valid extracted reconstructed replica exists within the product then this value will be set to the default value of 1.0 for every replica record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float pgProductAmplitude {
            get {
                return this.pgProductAmplitudeField;
            }
            set {
                this.pgProductAmplitudeField = value;
            }
        }
        
        /// <remarks>
///Phase of the PG product derived from this replica [radians]. The phase value annotated for the PG product is:
///arg(1/PG * meanRxCalPow(swath1)/meanRxCalPow(swathn))
///Where:
///- arg() is the phase value function for a complex number;
///- meanRxCalPow(swath1) is the mean RX calibration power of swath 1 calculated according to [R-14];
///- meanRxCalPow(swathn) is the mean RX calibration power of the current swath calculated according to [R-14].
///PG product values can only be calculated for products that have at least one valid extracted reconstructed replica. If no valid extracted reconstructed replica exists within the product then this value will be set to the default value of 0.0 for every replica record.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float pgProductPhase {
            get {
                return this.pgProductPhaseField;
            }
            set {
                this.pgProductPhaseField = value;
            }
        }
        
        /// <remarks>
///PG product amplitude value from the input PG product model.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float modelPgProductAmplitude {
            get {
                return this.modelPgProductAmplitudeField;
            }
            set {
                this.modelPgProductAmplitudeField = value;
            }
        }
        
        /// <remarks>
///PG product phase value from the input PG product model [radians].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float modelPgProductPhase {
            get {
                return this.modelPgProductPhaseField;
            }
            set {
                this.modelPgProductPhaseField = value;
            }
        }
        
        /// <remarks>
///Indicates if the amplitude and phase of the PG product are valid (within the configured threshold) when compared to the mean and standard deviation of the amplitude and phase for all PG product values. Set to true if |pgProductAmplitude – meanPgProductAmplitude| < pgAmpStdFractionThreshold * stdDevPgProductAmplitude and |pgProductPhase – meanPgProductPhase| < pgPhaseStdFractionThreshold * stdDevPgProductPhase; or, false otherwise.
///Where pgAmpStdFractionThreshold and pgPhaseStdFractionThreshold are configured threshold values.
///PG product values can only be calculated and validated for products that have at least one valid extracted reconstructed replica. If no valid extracted reconstructed replica exists within the product then this flag will be set to false for every replica record.
///
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool relativePgProductValidFlag {
            get {
                return this.relativePgProductValidFlagField;
            }
            set {
                this.relativePgProductValidFlagField = value;
            }
        }
        
        /// <remarks>
///Indicates if the amplitude and phase of the PG product are valid (within the configure threshold) when compared to the value of the PG product model. Set to true if |pgProductAmplitude – modelPgProductAmplitude| < maxPgAmpErrorThreshold and |pgProductPhase – modelPgProductPhase| < maxPgPhaseErrorThreshold; or, false otherwise.
///Where maxPgAmpErrorThreshold and maxPgPhaseErrorThreshold are configured threshold values and and modelPgProductPhase are values obtained from the PG product model.
///PG product values can only be calculated and validated for products that have at least one valid extracted reconstructed replica. If no valid extracted reconstructed replica exists within the product then this flag will be set to false for every replica record.
///
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool absolutePgProductValidFlag {
            get {
                return this.absolutePgProductValidFlagField;
            }
            set {
                this.absolutePgProductValidFlagField = value;
            }
        }
        
        /// <remarks>
///Internal time delay [s] representing the calculated deviation of the replica location from the location of the transmitted pulse. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float internalTimeDelay {
            get {
                return this.internalTimeDelayField;
            }
            set {
                this.internalTimeDelayField = value;
            }
        }
    }
    
    /// <remarks>
///List of noise packet records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class noiseListType {
        
        private string countField11;
        
        private noiseType[] noiseField;
        
        /// <remarks>
///Number of noise records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField11;
            }
            set {
                this.countField11 = value;
            }
        }
        
        /// <remarks>
///Noise parameters derived from noise packets.  There are a maximum of two sets of noise parameters per swath.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("noise", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public noiseType[] noise {
            get {
                return this.noiseField;
            }
            set {
                this.noiseField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for noise packet information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class noiseType {
        
        private swathType swathField3;
        
        private System.DateTime azimuthTimeField8;
        
        private @float noisePowerCorrectionFactorField;
        
        private uint32 numberOfNoiseLinesField;
        
        /// <remarks>
///Swath to which this noise information applies.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField3;
            }
            set {
                this.swathField3 = value;
            }
        }
        
        /// <remarks>
///Zero Doppler azimuth time of the noise measurement [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField8;
            }
            set {
                this.azimuthTimeField8 = value;
            }
        }
        
        /// <remarks>
///Noise power correction factor.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float noisePowerCorrectionFactor {
            get {
                return this.noisePowerCorrectionFactorField;
            }
            set {
                this.noisePowerCorrectionFactorField = value;
            }
        }
        
        /// <remarks>
///Number of noise lines used to calculate noise correction factor.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numberOfNoiseLines {
            get {
                return this.numberOfNoiseLinesField;
            }
            set {
                this.numberOfNoiseLinesField = value;
            }
        }
    }
    
    /// <remarks>
///List of terrain height annotation records updated along track.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class terrainHeightListType {
        
        private string countField12;
        
        private terrainHeightType[] terrainHeightField;
        
        /// <remarks>
///Number of terrain height records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField12;
            }
            set {
                this.countField12 = value;
            }
        }
        
        /// <remarks>
///Terrain height record containing the average terrain height (in metres above the ocean surface) for the given zero Doppler azimuth time. With a minimum terrain height spacing of 1s and a maximum product length of 25 minutes, the maximum size of this list is 1500 elements. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("terrainHeight", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public terrainHeightType[] terrainHeight {
            get {
                return this.terrainHeightField;
            }
            set {
                this.terrainHeightField = value;
            }
        }
    }
    
    /// <remarks>
///Terrain height annotation record. A terrain height record contains the Zero Doppler azimuth time to which the height measurement applies and the measure of the terrain height above sea level.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class terrainHeightType {
        
        private System.DateTime azimuthTimeField9;
        
        private @double valueField6;
        
        /// <remarks>
///Zero Doppler azimuth time of terrain height measurement [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField9;
            }
            set {
                this.azimuthTimeField9 = value;
            }
        }
        
        /// <remarks>
///Average terrain height above ocean surface [m]. The value is the average height in the range direction for the given zero Doppler azimuth time.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double value {
            get {
                return this.valueField6;
            }
            set {
                this.valueField6 = value;
            }
        }
    }
    
    /// <remarks>
///List of azimuth FM rate values updated along azimuth.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class azimuthFmRateListType {
        
        private string countField13;
        
        private azimuthFmRateType[] azimuthFmRateField;
        
        /// <remarks>
///Number of azimuthFmRate records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField13;
            }
            set {
                this.countField13 = value;
            }
        }
        
        /// <remarks>
///Azimuth FM rate = c0 + c1(tSR - t0) + c2(tSR - t0)2. Where tSR = two way slant range time. With a minimum azimuth processing block length of approximately 2s and a maximum product length of 25 minutes, the maximum size of this list is 750 elements.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("azimuthFmRate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public azimuthFmRateType[] azimuthFmRate {
            get {
                return this.azimuthFmRateField;
            }
            set {
                this.azimuthFmRateField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for azimuth FM rate.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class azimuthFmRateType {
        
        private System.DateTime azimuthTimeField10;
        
        private @double t0Field;
        
        private @double c0Field;
        
        private @double c1Field;
        
        private @double c2Field;
        
        /// <remarks>
///Zero Doppler azimuth time to which azimuth FM rate parameters apply [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField10;
            }
            set {
                this.azimuthTimeField10 = value;
            }
        }
        
        /// <remarks>
///Two way slant range time origin used for azimuth FM rate calculation [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double t0 {
            get {
                return this.t0Field;
            }
            set {
                this.t0Field = value;
            }
        }
        
        /// <remarks>
///Azimuth FM rate coefficient c0 [Hz/s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double c0 {
            get {
                return this.c0Field;
            }
            set {
                this.c0Field = value;
            }
        }
        
        /// <remarks>
///Azimuth FM rate coefficient c1 [Hz/s^2].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double c1 {
            get {
                return this.c1Field;
            }
            set {
                this.c1Field = value;
            }
        }
        
        /// <remarks>
///Azimuth FM rate coefficient c2 [Hz/s^3].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double c2 {
            get {
                return this.c2Field;
            }
            set {
                this.c2Field = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 image product annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1ImageAnnotationType {
        
        private imageInformationType imageInformationField;
        
        private processingInformationType processingInformationField;
        
        /// <remarks>
///Image information. This record contains the elements that describe the properties and characteristics of the image MDS.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public imageInformationType imageInformation {
            get {
                return this.imageInformationField;
            }
            set {
                this.imageInformationField = value;
            }
        }
        
        /// <remarks>
///Processing information.  This record contains information describing the key options and parameters used by the IPF during image processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processingInformationType processingInformation {
            get {
                return this.processingInformationField;
            }
            set {
                this.processingInformationField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for general image information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class imageInformationType {
        
        private System.DateTime productFirstLineUtcTimeField;
        
        private System.DateTime productLastLineUtcTimeField;
        
        private System.DateTime ascendingNodeTimeField;
        
        private System.DateTime anchorTimeField;
        
        private productCompositionType productCompositionField;
        
        private uint32 sliceNumberField;
        
        private sliceListType sliceListField;
        
        private @double slantRangeTimeField;
        
        private pixelValueType pixelValueField;
        
        private outputPixelsType outputPixelsField;
        
        private @float rangePixelSpacingField;
        
        private @float azimuthPixelSpacingField;
        
        private @double azimuthTimeIntervalField;
        
        private @double azimuthFrequencyField;
        
        private uint32 numberOfSamplesField;
        
        private uint32 numberOfLinesField;
        
        private @double zeroDopMinusAcqTimeField;
        
        private @double incidenceAngleMidSwathField;
        
        private imageStatisticsType imageStatisticsField1;
        
        /// <remarks>
///Zero Doppler azimuth time to the mid-slant range of the first line of the image [UTC]. When bi-static correction is performed during processing the time annotated is the time of the imaging of the ground. When bi-static correction is not performed the time annotated is the time of the reception of the echo.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime productFirstLineUtcTime {
            get {
                return this.productFirstLineUtcTimeField;
            }
            set {
                this.productFirstLineUtcTimeField = value;
            }
        }
        
        /// <remarks>
///Zero Doppler azimuth time to the mid-slant range of the last line of the image [UTC]. When bi-static correction is performed during processing the time annotated is the time of the imaging of the ground. When bi-static correction is not performed the time annotated is the time of the reception of the echo.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime productLastLineUtcTime {
            get {
                return this.productLastLineUtcTimeField;
            }
            set {
                this.productLastLineUtcTimeField = value;
            }
        }
        
        /// <remarks>
///Time of the Ascending Node Crossing (ANX) priorto the start of the image [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ascendingNodeTime {
            get {
                return this.ascendingNodeTimeField;
            }
            set {
                this.ascendingNodeTimeField = value;
            }
        }
        
        /// <remarks>
///Zero Doppler reference time used for processing [UTC]. If the product is a slice product, this time is at the time of the first slice within a segment and all slices within the segment report the same time value. Otherwise, this time is the same as the productFirstLineUtcTime.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime anchorTime {
            get {
                return this.anchorTimeField;
            }
            set {
                this.anchorTimeField = value;
            }
        }
        
        /// <remarks>
///Product composition indicator, where the valid values are: "Individual", to indicate a full non-sliced product; "Slice", to indicate that this is a single slice of a larger product; and "Assembled", to indicate that this is a product that has been created by combining multiple slices.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public productCompositionType productComposition {
            get {
                return this.productCompositionField;
            }
            set {
                this.productCompositionField = value;
            }
        }
        
        /// <remarks>
///If the product composition is type “Slice”, this indicates the number of the current slice within the multi-slice segment. If product composition type is “Individual” or “Assembled”, the slice number is 0.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 sliceNumber {
            get {
                return this.sliceNumberField;
            }
            set {
                this.sliceNumberField = value;
            }
        }
        
        /// <remarks>
///List of annotations for all slices in segment.  The total size of the list represents the number of slices in the segment.  If product composition type is “Individual” or “Assembled”, the total size of this list is 0.  
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public sliceListType sliceList {
            get {
                return this.sliceListField;
            }
            set {
                this.sliceListField = value;
            }
        }
        
        /// <remarks>
///Two-way slant range time to first sample [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double slantRangeTime {
            get {
                return this.slantRangeTimeField;
            }
            set {
                this.slantRangeTimeField = value;
            }
        }
        
        /// <remarks>
///Interpretation of the image pixels within the image MDS [Detected or Complex].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public pixelValueType pixelValue {
            get {
                return this.pixelValueField;
            }
            set {
                this.pixelValueField = value;
            }
        }
        
        /// <remarks>
///Data type of output pixels within the image MDS.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public outputPixelsType outputPixels {
            get {
                return this.outputPixelsField;
            }
            set {
                this.outputPixelsField = value;
            }
        }
        
        /// <remarks>
///Pixel spacing between range samples [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float rangePixelSpacing {
            get {
                return this.rangePixelSpacingField;
            }
            set {
                this.rangePixelSpacingField = value;
            }
        }
        
        /// <remarks>
///Nominal pixel spacing between range lines [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float azimuthPixelSpacing {
            get {
                return this.azimuthPixelSpacingField;
            }
            set {
                this.azimuthPixelSpacingField = value;
            }
        }
        
        /// <remarks>
///Time spacing between azimuth lines of the output image [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double azimuthTimeInterval {
            get {
                return this.azimuthTimeIntervalField;
            }
            set {
                this.azimuthTimeIntervalField = value;
            }
        }
        
        /// <remarks>
///Azimuth line frequency of the output image [Hz]. This is the inverse of the azimuthTimeInterval.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double azimuthFrequency {
            get {
                return this.azimuthFrequencyField;
            }
            set {
                this.azimuthFrequencyField = value;
            }
        }
        
        /// <remarks>
///Total number of samples in the output image (image width).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numberOfSamples {
            get {
                return this.numberOfSamplesField;
            }
            set {
                this.numberOfSamplesField = value;
            }
        }
        
        /// <remarks>
///Total number of lines in the output image (image length).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numberOfLines {
            get {
                return this.numberOfLinesField;
            }
            set {
                this.numberOfLinesField = value;
            }
        }
        
        /// <remarks>
///Time difference between zero Doppler time and acquisition time of output image lines [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double zeroDopMinusAcqTime {
            get {
                return this.zeroDopMinusAcqTimeField;
            }
            set {
                this.zeroDopMinusAcqTimeField = value;
            }
        }
        
        /// <remarks>
///Incidence angle at mid swath [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double incidenceAngleMidSwath {
            get {
                return this.incidenceAngleMidSwathField;
            }
            set {
                this.incidenceAngleMidSwathField = value;
            }
        }
        
        /// <remarks>
///Mean and standard deviation statistics for the image. If the pixelValue field is set to Complex, both the real and imaginary parts of the statistics are reported. If the pixelValue field is set to Detected, only the real parts of the statistics are reported.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public imageStatisticsType imageStatistics {
            get {
                return this.imageStatisticsField1;
            }
            set {
                this.imageStatisticsField1 = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of product composition indicators.  The valid values are: "Individual", to indicate a full non-sliced product; "Slice", to indicate that this is a single slice of a larger product; and "Assembled", to indicate that this is a product that has been created by combining multiple slices.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum productCompositionType {
        
        /// <remarks/>
        Individual,
        
        /// <remarks/>
        Slice,
        
        /// <remarks/>
        Assembled,
    }
    
    /// <remarks>
///List of slice annotation records
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sliceListType {
        
        private string countField14;
        
        private sliceType[] sliceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField14;
            }
            set {
                this.countField14 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("slice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public sliceType[] slice {
            get {
                return this.sliceField;
            }
            set {
                this.sliceField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for slice information
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sliceType {
        
        private uint32 sliceNumberField1;
        
        private System.DateTime sensingStartTimeField;
        
        private System.DateTime sensingStopTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 sliceNumber {
            get {
                return this.sliceNumberField1;
            }
            set {
                this.sliceNumberField1 = value;
            }
        }
        
        /// <remarks>
///Sensing start time of this slice [UTC].  If this slice entry is the same as the sliceNumber of the product, this sensing start time will be the same as the firstLineSensingTime for the current product.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime sensingStartTime {
            get {
                return this.sensingStartTimeField;
            }
            set {
                this.sensingStartTimeField = value;
            }
        }
        
        /// <remarks>
///Sensing stop time of this slice [UTC].  If this slice entry is the same as the sliceNumber of the product, this sensing stop time will be the same as the lastLineSensingTime for the current product.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime sensingStopTime {
            get {
                return this.sensingStopTimeField;
            }
            set {
                this.sensingStopTimeField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of output pixel value interpretaion types.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum pixelValueType {
        
        /// <remarks/>
        Complex,
        
        /// <remarks/>
        Detected,
    }
    
    /// <remarks>
///Enumeration of output pixel data types.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum outputPixelsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("32 bit Float")]
        Item32bitFloat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16 bit Signed Integer")]
        Item16bitSignedInteger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16 bit Unsigned Integer")]
        Item16bitUnsignedInteger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8 bit Unsigned Integer")]
        Item8bitUnsignedInteger,
    }
    
    /// <remarks>
///Annotation record for processing information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class processingInformationType {
        
        private bool rawDataAnalysisUsedField;
        
        private bool orbitDataFileUsedField;
        
        private bool attitudeDataFileUsedField;
        
        private bool rxVariationCorrectionAppliedField;
        
        private bool antennaElevationPatternAppliedField;
        
        private bool antennaAzimuthPatternAppliedField;
        
        private bool antennaAzimuthElementPatternAppliedField;
        
        private dcMethodType dcMethodField1;
        
        private dcInputDataType dcInputDataField;
        
        private bool rangeSpreadingLossCompensationAppliedField;
        
        private bool srgrConversionAppliedField;
        
        private bool detectionPerformedField;
        
        private bool thermalNoiseCorrectionPerformedField;
        
        private chirpSourceType chirpSourceField1;
        
        private pgSourceType pgSourceField1;
        
        private rrfSpectrumType rrfSpectrumField;
        
        private string applicationLutIdField;
        
        private swathProcParamsListType swathProcParamsListField;
        
        private inputDimensionsListType inputDimensionsListField;
        
        private @double referenceRangeField;
        
        private string ellipsoidNameField;
        
        private @double ellipsoidSemiMajorAxisField;
        
        private @double ellipsoidSemiMinorAxisField;
        
        private bool bistaticDelayCorrectionAppliedField;
        
        private topsFilterConventionType topsFilterConventionField;
        
        private orbitAttitudeSourceType orbitSourceField;
        
        private orbitAttitudeSourceType attitudeSourceField;
        
        /// <remarks>
///False if correction was done using default parameters, true if correction was done using raw data analysis.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool rawDataAnalysisUsed {
            get {
                return this.rawDataAnalysisUsedField;
            }
            set {
                this.rawDataAnalysisUsedField = value;
            }
        }
        
        /// <remarks>
///True if the orbit data used for processing came from an external file, false if the orbit data used for processing came from the downlink.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool orbitDataFileUsed {
            get {
                return this.orbitDataFileUsedField;
            }
            set {
                this.orbitDataFileUsedField = value;
            }
        }
        
        /// <remarks>
///True if the attitude data used for processing came from an external file, false if the attitude data used for processing came from the downlink.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool attitudeDataFileUsed {
            get {
                return this.attitudeDataFileUsedField;
            }
            set {
                this.attitudeDataFileUsedField = value;
            }
        }
        
        /// <remarks>
///False if the receive variation correction was not applied, true if the receive variation correction was applied.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool rxVariationCorrectionApplied {
            get {
                return this.rxVariationCorrectionAppliedField;
            }
            set {
                this.rxVariationCorrectionAppliedField = value;
            }
        }
        
        /// <remarks>
///False if antenna elevation pattern correction was not applied, true if antenna elevation pattern correction was applied.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool antennaElevationPatternApplied {
            get {
                return this.antennaElevationPatternAppliedField;
            }
            set {
                this.antennaElevationPatternAppliedField = value;
            }
        }
        
        /// <remarks>
///False if antenna azimuth pattern correction was not applied, true if antenna azimuth pattern correction was applied.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool antennaAzimuthPatternApplied {
            get {
                return this.antennaAzimuthPatternAppliedField;
            }
            set {
                this.antennaAzimuthPatternAppliedField = value;
            }
        }
        
        /// <remarks>
///False if antenna azimuth element pattern correction was not applied, true if antenna azimuth element pattern correction was applied.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool antennaAzimuthElementPatternApplied {
            get {
                return this.antennaAzimuthElementPatternAppliedField;
            }
            set {
                this.antennaAzimuthElementPatternAppliedField = value;
            }
        }
        
        /// <remarks>
///Doppler centroid estimation method used during processing. Both the DC calculated from orbit geometry and the DC estimated from the raw data are annotated within the Doppler data set; however, this parameter describes the actual DC method used during image processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dcMethodType dcMethod {
            get {
                return this.dcMethodField1;
            }
            set {
                this.dcMethodField1 = value;
            }
        }
        
        /// <remarks>
///Type of input data used for Doppler centroid estimation.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dcInputDataType dcInputData {
            get {
                return this.dcInputDataField;
            }
            set {
                this.dcInputDataField = value;
            }
        }
        
        /// <remarks>
///False if range spreading loss compensation was not performed, true if range spreading loss compensation was performed.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool rangeSpreadingLossCompensationApplied {
            get {
                return this.rangeSpreadingLossCompensationAppliedField;
            }
            set {
                this.rangeSpreadingLossCompensationAppliedField = value;
            }
        }
        
        /// <remarks>
///False if slant range to ground range conversion has not been performed, true if slant range to ground range conversion has been performed.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool srgrConversionApplied {
            get {
                return this.srgrConversionAppliedField;
            }
            set {
                this.srgrConversionAppliedField = value;
            }
        }
        
        /// <remarks>
///False if detection has not been performed, true if detection has been performed.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool detectionPerformed {
            get {
                return this.detectionPerformedField;
            }
            set {
                this.detectionPerformedField = value;
            }
        }
        
        /// <remarks>
///False if thermal noise correction has not been performed, true if thermal noise correction has been performed.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool thermalNoiseCorrectionPerformed {
            get {
                return this.thermalNoiseCorrectionPerformedField;
            }
            set {
                this.thermalNoiseCorrectionPerformedField = value;
            }
        }
        
        /// <remarks>
///Chirp source used for range compression.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public chirpSourceType chirpSource {
            get {
                return this.chirpSourceField1;
            }
            set {
                this.chirpSourceField1 = value;
            }
        }
        
        /// <remarks>
///PG source used during processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public pgSourceType pgSource {
            get {
                return this.pgSourceField1;
            }
            set {
                this.pgSourceField1 = value;
            }
        }
        
        /// <remarks>
///Spectrum of range replica function used.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public rrfSpectrumType rrfSpectrum {
            get {
                return this.rrfSpectrumField;
            }
            set {
                this.rrfSpectrumField = value;
            }
        }
        
        /// <remarks>
///Name of the application scaling LUT applied to compensate for the range spreading loss. Set to "None" if no scaling was applied.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string applicationLutId {
            get {
                return this.applicationLutIdField;
            }
            set {
                this.applicationLutIdField = value;
            }
        }
        
        /// <remarks>
///List of processing parameters that may vary per swath.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathProcParamsListType swathProcParamsList {
            get {
                return this.swathProcParamsListField;
            }
            set {
                this.swathProcParamsListField = value;
            }
        }
        
        /// <remarks>
///Input dimensions list. This element contains a list of inputDimensions records which describe the number of input range samples and azimuth lines.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public inputDimensionsListType inputDimensionsList {
            get {
                return this.inputDimensionsListField;
            }
            set {
                this.inputDimensionsListField = value;
            }
        }
        
        /// <remarks>
///Range spreading loss reference slant range [m]. The range spreading loss is compensated by amplitude scaling each range sample by 1/Grsl(R) where: Grsl(R) = cuberoot(rRef/R); and, R = slant range of sample.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double referenceRange {
            get {
                return this.referenceRangeField;
            }
            set {
                this.referenceRangeField = value;
            }
        }
        
        /// <remarks>
///Name of the reference ellipsoid used when processing this product.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ellipsoidName {
            get {
                return this.ellipsoidNameField;
            }
            set {
                this.ellipsoidNameField = value;
            }
        }
        
        /// <remarks>
///Semi-major axis of ellipsoid [m]. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double ellipsoidSemiMajorAxis {
            get {
                return this.ellipsoidSemiMajorAxisField;
            }
            set {
                this.ellipsoidSemiMajorAxisField = value;
            }
        }
        
        /// <remarks>
///Semi-minor axis of ellipsoid [m]. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double ellipsoidSemiMinorAxis {
            get {
                return this.ellipsoidSemiMinorAxisField;
            }
            set {
                this.ellipsoidSemiMinorAxisField = value;
            }
        }
        
        /// <remarks>
///False if bi-static delay correction was not applied, true if bi-static delay correction was applied.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool bistaticDelayCorrectionApplied {
            get {
                return this.bistaticDelayCorrectionAppliedField;
            }
            set {
                this.bistaticDelayCorrectionAppliedField = value;
            }
        }
        
        /// <remarks>
///Name of the TOPS filter convention used during processing. This field describes how the TOPS ramping/de-ramping filters are defined. If set to "Only Echo Lines" then the filter is defined using only the echo lines in a burst; otherwise, if set to "All Lines" then the filter is defined using all the lines in a burst.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public topsFilterConventionType topsFilterConvention {
            get {
                return this.topsFilterConventionField;
            }
            set {
                this.topsFilterConventionField = value;
            }
        }
        
        /// <remarks>
///Source of the orbit data used during processing. Set to “Extracted” if the orbit information extracted from the sub-commutated acillary data in the source packet headers is used during processing. Set to “Auxiliary” if the orbit information from an input auxiliary file is used during processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public orbitAttitudeSourceType orbitSource {
            get {
                return this.orbitSourceField;
            }
            set {
                this.orbitSourceField = value;
            }
        }
        
        /// <remarks>
///Source of the orbit data used during processing. Set to “Extracted” if the attitude information extracted from the sub-commutated acillary data in the source packet headers is used during processing. Set to “Auxiliary” if the attitude information from an input auxiliary file is used during processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public orbitAttitudeSourceType attitudeSource {
            get {
                return this.attitudeSourceField;
            }
            set {
                this.attitudeSourceField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of Doppler centroid input data formats.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum dcInputDataType {
        
        /// <remarks/>
        Raw,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Range Compressed")]
        RangeCompressed,
    }
    
    /// <remarks>
///List of processing parameters that may vary per swath.  This list contains one record for all products except IW/EW GRD products.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swathProcParamsListType {
        
        private string countField15;
        
        private swathProcParamsType[] swathProcParamsField;
        
        /// <remarks>
///Number of inputDimensions records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField15;
            }
            set {
                this.countField15 = value;
            }
        }
        
        /// <remarks>
///Processing parameters. This record contains the range and azimuth processing parameters used to process each input swath in the image. There will be one record per ADS, except for IW/EW GRD products which will contain one per swath.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("swathProcParams", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathProcParamsType[] swathProcParams {
            get {
                return this.swathProcParamsField;
            }
            set {
                this.swathProcParamsField = value;
            }
        }
    }
    
    /// <remarks>
///Processing parameters. This record contains the range and azimuth processing parameters used to process each input swath in the image. 
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swathProcParamsType {
        
        private swathType swathField4;
        
        private processingParametersType rangeProcessingField;
        
        private processingParametersType azimuthProcessingField;
        
        private @float processorScalingFactorField;
        
        /// <remarks>
///Input swath to which the processing parameters were applied.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField4;
            }
            set {
                this.swathField4 = value;
            }
        }
        
        /// <remarks>
///Range processing information. This record describes the parameters used by the IPF during range processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processingParametersType rangeProcessing {
            get {
                return this.rangeProcessingField;
            }
            set {
                this.rangeProcessingField = value;
            }
        }
        
        /// <remarks>
///Azimuth processing information. This record describes the parameters used by the IPF during azimuth processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processingParametersType azimuthProcessing {
            get {
                return this.azimuthProcessingField;
            }
            set {
                this.azimuthProcessingField = value;
            }
        }
        
        /// <remarks>
///Processor scaling factor. This value includes the input scaling factor and the range and azimuth oversampling factorscomes from the auxiliary input and is applied multiplicatively to the image data during processing. This is the value referred to as kproc in [R-14].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @float processorScalingFactor {
            get {
                return this.processorScalingFactorField;
            }
            set {
                this.processorScalingFactorField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for parameters used during range and azimuth processing.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class processingParametersType {
        
        private weightingWindowType windowTypeField;
        
        private @double windowCoefficientField;
        
        private @double totalBandwidthField;
        
        private @double processingBandwidthField;
        
        private @double lookBandwidthField;
        
        private uint32 numberOfLooksField;
        
        private @double lookOverlapField;
        
        /// <remarks>
///Name of the weighting window type used during processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public weightingWindowType windowType {
            get {
                return this.windowTypeField;
            }
            set {
                this.windowTypeField = value;
            }
        }
        
        /// <remarks>
///Value of the weighting window coefficient used during processing.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double windowCoefficient {
            get {
                return this.windowCoefficientField;
            }
            set {
                this.windowCoefficientField = value;
            }
        }
        
        /// <remarks>
///Total available bandwidth [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double totalBandwidth {
            get {
                return this.totalBandwidthField;
            }
            set {
                this.totalBandwidthField = value;
            }
        }
        
        /// <remarks>
///Bandwidth used during processing [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double processingBandwidth {
            get {
                return this.processingBandwidthField;
            }
            set {
                this.processingBandwidthField = value;
            }
        }
        
        /// <remarks>
///Bandwidth for each look used during processing [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double lookBandwidth {
            get {
                return this.lookBandwidthField;
            }
            set {
                this.lookBandwidthField = value;
            }
        }
        
        /// <remarks>
///Number of looks.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numberOfLooks {
            get {
                return this.numberOfLooksField;
            }
            set {
                this.numberOfLooksField = value;
            }
        }
        
        /// <remarks>
///Overlap between looks [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double lookOverlap {
            get {
                return this.lookOverlapField;
            }
            set {
                this.lookOverlapField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of weighting windwow names.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum weightingWindowType {
        
        /// <remarks/>
        Kaiser,
        
        /// <remarks/>
        Hamming,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks>
///List of image dimension annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class inputDimensionsListType {
        
        private string countField16;
        
        private inputDimensionsType[] inputDimensionsField;
        
        /// <remarks>
///Number of inputDimensions records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField16;
            }
            set {
                this.countField16 = value;
            }
        }
        
        /// <remarks>
///Input dimensions. This record contains the dimensions of the input data in terms of number of input samples and lines. For individual scene and slice products there is one inputDimensions record, except in the case of IW/EW GRD products which contain one record per swath. For assembled products the list contains all the inputDimensions records for each slice included in the assembled product. For a minimum output slice length of 10s, a maximum segment length of 25 minutes and a maximum of 5 swaths, the maximum number of records in the list is 750.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("inputDimensions", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public inputDimensionsType[] inputDimensions {
            get {
                return this.inputDimensionsField;
            }
            set {
                this.inputDimensionsField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for image dimension information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class inputDimensionsType {
        
        private System.DateTime azimuthTimeField11;
        
        private swathType swathField5;
        
        private uint32 numberOfInputSamplesField;
        
        private uint32 numberOfInputLinesField;
        
        /// <remarks>
///Zero Doppler azimuth time to which this set of dimensions applies [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField11;
            }
            set {
                this.azimuthTimeField11 = value;
            }
        }
        
        /// <remarks>
///Input swath to which the dimensions apply.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField5;
            }
            set {
                this.swathField5 = value;
            }
        }
        
        /// <remarks>
///Number of input range samples for the image or slice.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numberOfInputSamples {
            get {
                return this.numberOfInputSamplesField;
            }
            set {
                this.numberOfInputSamplesField = value;
            }
        }
        
        /// <remarks>
///Number of input range lines for the image or slice.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 numberOfInputLines {
            get {
                return this.numberOfInputLinesField;
            }
            set {
                this.numberOfInputLinesField = value;
            }
        }
    }
    
    /// <remarks>
///Enumeration of valid conventions for defining the TOPS ramping/de-ramping filter.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum topsFilterConventionType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("All Lines")]
        AllLines,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Only Echo Lines")]
        OnlyEchoLines,
    }
    
    /// <remarks>
///Enumeration of value sources of orbit and attitude data. "Extracted" or "Auxiliary".
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum orbitAttitudeSourceType {
        
        /// <remarks/>
        Downlink,
        
        /// <remarks/>
        Auxiliary,
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 Doppler Centroid product annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1DopplerCentroidType {
        
        private dcEstimateListType dcEstimateListField;
        
        /// <remarks>
///List of Doppler centroid estimates that have been calculated by the IPF during image processing. The list contains an entry for each Doppler centroid estimate made along azimuth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dcEstimateListType dcEstimateList {
            get {
                return this.dcEstimateListField;
            }
            set {
                this.dcEstimateListField = value;
            }
        }
    }
    
    /// <remarks>
///List of Doppler estimate block records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dcEstimateListType {
        
        private string countField17;
        
        private dcEstimateType[] dcEstimateField;
        
        /// <remarks>
///Number of dcEstimate records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField17;
            }
            set {
                this.countField17 = value;
            }
        }
        
        /// <remarks>
///Doppler centroid estimate record which contains the Doppler centroid calculated from geometry and estimated from the data, associated signal-to-noise ratio values and indicates which DCE method was used by the IPF during image processing. With a minimum Doppler centroid update rate of 1s (for IW and EW where the Doppler is recalculated for every burst cycle) and a maximum product length of 25 minutes, the maximum size of this list is 1500 elements.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("dcEstimate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public dcEstimateType[] dcEstimate {
            get {
                return this.dcEstimateField;
            }
            set {
                this.dcEstimateField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Doppler estimate blocks.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dcEstimateType {
        
        private System.DateTime azimuthTimeField12;
        
        private @double t0Field1;
        
        private floatCoefficientArray geometryDcPolynomialField;
        
        private floatCoefficientArray dataDcPolynomialField;
        
        private @double dataDcRmsErrorField;
        
        private bool dataDcRmsErrorAboveThresholdField;
        
        private System.DateTime fineDceAzimuthStartTimeField;
        
        private System.DateTime fineDceAzimuthStopTimeField;
        
        private fineDceListType fineDceListField;
        
        /// <remarks>
///Zero Doppler azimuth time of this Doppler centroid estimate [UTC].  This time represents the centre of the block used to calculate the fune DC estimates used to derive the data DC polynomial.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField12;
            }
            set {
                this.azimuthTimeField12 = value;
            }
        }
        
        /// <remarks>
///Two-way slant range time origin for Doppler centroid estimate [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double t0 {
            get {
                return this.t0Field1;
            }
            set {
                this.t0Field1 = value;
            }
        }
        
        /// <remarks>
///Doppler centroid estimated from orbit, expressed as the following polynomial (assuming 5 coefficients): Doppler Centroid = d0 + d1(tSR-t0) + d2(tSR-t0)^2 + d3(tSR-t0)^3 + d4(tSR-t0)^4, where tSR = 2 way slant range time.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public floatCoefficientArray geometryDcPolynomial {
            get {
                return this.geometryDcPolynomialField;
            }
            set {
                this.geometryDcPolynomialField = value;
            }
        }
        
        /// <remarks>
///Doppler centroid estimated from data, expressed as the following polynomial (assuming 5 coefficients): Doppler Centroid = d0 + d1(tSR-t0) + d2(tSR-t0)^2 + d3(tSR-t0)^3 + d4(tSR-t0)^4, where tSR = 2 way slant range time.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public floatCoefficientArray dataDcPolynomial {
            get {
                return this.dataDcPolynomialField;
            }
            set {
                this.dataDcPolynomialField = value;
            }
        }
        
        /// <remarks>
///The RMS error of the Doppler centroid estimate.  It is calculated as the average of the individual RMS residual errors between input fine Doppler centroid estimates and the fitted polynomial.  If the Doppler centroid was not estimated from data, this is set to 0. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double dataDcRmsError {
            get {
                return this.dataDcRmsErrorField;
            }
            set {
                this.dataDcRmsErrorField = value;
            }
        }
        
        /// <remarks>
///False if the RMS error is below the acceptable threshold for the Doppler centroid estimated from the data.  True if the RMS error is greater than or equal to the acceptable threshold.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool dataDcRmsErrorAboveThreshold {
            get {
                return this.dataDcRmsErrorAboveThresholdField;
            }
            set {
                this.dataDcRmsErrorAboveThresholdField = value;
            }
        }
        
        /// <remarks>
///First zero Doppler azimuth time of the block of signal data used for the fine DC estimates [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime fineDceAzimuthStartTime {
            get {
                return this.fineDceAzimuthStartTimeField;
            }
            set {
                this.fineDceAzimuthStartTimeField = value;
            }
        }
        
        /// <remarks>
///Last zero Doppler azimuth time of the block of signal data used for the fine DC estimates [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime fineDceAzimuthStopTime {
            get {
                return this.fineDceAzimuthStopTimeField;
            }
            set {
                this.fineDceAzimuthStopTimeField = value;
            }
        }
        
        /// <remarks>
///List of the fine Doppler centroid estimates for this block. This element is a list of fineDce records which contain the fine Doppler centroid frequencies that were used for fitting the data polynomial for this block.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public fineDceListType fineDceList {
            get {
                return this.fineDceListField;
            }
            set {
                this.fineDceListField = value;
            }
        }
    }
    
    /// <remarks>
///List of baseband Doppler centroid estimates.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fineDceListType {
        
        private string countField18;
        
        private fineDceType[] fineDceField;
        
        /// <remarks>
///Length of the baseband Doppler centroid estimates list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField18;
            }
            set {
                this.countField18 = value;
            }
        }
        
        /// <remarks>
///Fine Doppler centroid estimate. Each estimate represents the Doppler frequency at the given slant range time within the current block. Approximately 20 estimates are performed per swath so for 5 swaths, the maximum number of estimates in this list is 100.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("fineDce", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public fineDceType[] fineDce {
            get {
                return this.fineDceField;
            }
            set {
                this.fineDceField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for baseband Doppler centroid estimates.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fineDceType {
        
        private @double slantRangeTimeField1;
        
        private @double frequencyField;
        
        /// <remarks>
///Two way slant range time to Doppler centroid frequency estimate [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double slantRangeTime {
            get {
                return this.slantRangeTimeField1;
            }
            set {
                this.slantRangeTimeField1 = value;
            }
        }
        
        /// <remarks>
///Fine Doppler centroid frequency estimate [Hz].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 antenna pattern product annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1AntennaPatternType {
        
        private antennaPatternListType antennaPatternListField;
        
        /// <remarks>
///Antenna pattern list. This element is a list of antennaPattern records that describe the antenna elevation pattern as it is updated in azimuth. The list contains an entry for each AEP update made along azimuth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public antennaPatternListType antennaPatternList {
            get {
                return this.antennaPatternListField;
            }
            set {
                this.antennaPatternListField = value;
            }
        }
    }
    
    /// <remarks>
///List of antenna elevation pattern annotation records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class antennaPatternListType {
        
        private string countField19;
        
        private antennaPatternType[] antennaPatternField1;
        
        /// <remarks>
///Number of antenna pattern records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField19;
            }
            set {
                this.countField19 = value;
            }
        }
        
        /// <remarks>
///The antenna pattern record describes the antenna elevation pattern at the given zero Doppler azimuth time for a given swath. For a minimum azimuth antenna pattern spacing of 10s, a maximum segment length of 25 minutes and a maximum 5 swaths, the maximum number of records in the list is 750.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("antennaPattern", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public antennaPatternType[] antennaPattern {
            get {
                return this.antennaPatternField1;
            }
            set {
                this.antennaPatternField1 = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for an antenna elevation pattern at given zero Doppler azimuth time and two-way slant range time.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class antennaPatternType {
        
        private swathType swathField6;
        
        private System.DateTime azimuthTimeField13;
        
        private doubleArray slantRangeTimeField2;
        
        private floatArray elevationAngleField;
        
        private floatArray elevationPatternField;
        
        private floatArray incidenceAngleField;
        
        private @double terrainHeightField1;
        
        /// <remarks>
///Swath to which the elevation antenna pattern applies.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField6;
            }
            set {
                this.swathField6 = value;
            }
        }
        
        /// <remarks>
///Zero Doppler azimuth time at which antenna pattern applies [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField13;
            }
            set {
                this.azimuthTimeField13 = value;
            }
        }
        
        /// <remarks>
///Two-way slant range time array for this antenna pattern [s]. This array contains the count attribute number of double floating point values (i.e. one value per point in the antenna pattern), separated by spaces.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public doubleArray slantRangeTime {
            get {
                return this.slantRangeTimeField2;
            }
            set {
                this.slantRangeTimeField2 = value;
            }
        }
        
        /// <remarks>
///Corresponding elevation angle for this antenna pattern [degrees]. This array contains the count attribute number of double floating point values (i.e. one value per point in the antenna pattern), separated by spaces. This array contains the same number of values as the slantRangeTime array.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public floatArray elevationAngle {
            get {
                return this.elevationAngleField;
            }
            set {
                this.elevationAngleField = value;
            }
        }
        
        /// <remarks>
///Corresponding two-way antenna elevation pattern value for this point. This array contains the count attribute number of double floating point values (i.e. one value per point in the antenna pattern), separated by spaces. This array contains the same number of values as the slantRangeTime array.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public floatArray elevationPattern {
            get {
                return this.elevationPatternField;
            }
            set {
                this.elevationPatternField = value;
            }
        }
        
        /// <remarks>
///Corresponding incidence angle value for this point. This array contains the count attribute number of double floating point values (i.e. one value per point in the antenna pattern), separated by spaces [degrees]. This array contains the same number of values as the slantRangeTime array. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public floatArray incidenceAngle {
            get {
                return this.incidenceAngleField;
            }
            set {
                this.incidenceAngleField = value;
            }
        }
        
        /// <remarks>
///Average terrain height in range for this antenna pattern [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double terrainHeight {
            get {
                return this.terrainHeightField1;
            }
            set {
                this.terrainHeightField1 = value;
            }
        }
    }
    
    /// <remarks>
///String containing an array of double precision floating point values separated by spaces. The mandatory count attribute defines the number of elements in the array.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doubleArray {
        
        private string countField20;
        
        private string unitsField4;
        
        private string valueField7;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField20;
            }
            set {
                this.countField20 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField4;
            }
            set {
                this.unitsField4 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField7;
            }
            set {
                this.valueField7 = value;
            }
        }
    }
    
    /// <remarks>
///String containing an array of float values separated by spaces. The mandatory count attribute defines the number of elements in the array.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class floatArray {
        
        private string countField21;
        
        private string unitsField5;
        
        private string valueField8;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField21;
            }
            set {
                this.countField21 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField5;
            }
            set {
                this.unitsField5 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField8;
            }
            set {
                this.valueField8 = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 swath timing annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1SwathType {
        
        private uint32 linesPerBurstField;
        
        private uint32 calLinesPerBurstField;
        
        private uint32 samplesPerBurstField;
        
        private burstListType burstListField;
        
        /// <remarks>
///Number of range lines within each burst (constant for all bursts within the swath).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 linesPerBurst {
            get {
                return this.linesPerBurstField;
            }
            set {
                this.linesPerBurstField = value;
            }
        }
        
        /// <remarks>
///Number of range lines within each burst that are calibration pulses (constant for all bursts within the swath). These lines are not present in the final output image but are required to correctly reconstruct the TOPS de-ramping/re-ramping filter for measurement data for which the TOPS scanning includes both the echo and calibration lines.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 calLinesPerBurst {
            get {
                return this.calLinesPerBurstField;
            }
            set {
                this.calLinesPerBurstField = value;
            }
        }
        
        /// <remarks>
///Number of range samples within each burst (constant for all bursts within the swath).
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 samplesPerBurst {
            get {
                return this.samplesPerBurstField;
            }
            set {
                this.samplesPerBurstField = value;
            }
        }
        
        /// <remarks>
///Burst list. This element contains a time ordered list of all the bursts within this swath. The list contains a burst record for each burst within this swath. This list is only applicable to IW and EW SLC products and has a length of zero for all others.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public burstListType burstList {
            get {
                return this.burstListField;
            }
            set {
                this.burstListField = value;
            }
        }
    }
    
    /// <remarks>
///Burst table annotation record.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class burstListType {
        
        private string countField22;
        
        private burstType[] burstField;
        
        /// <remarks>
///Number of burst records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField22;
            }
            set {
                this.countField22 = value;
            }
        }
        
        /// <remarks>
///Burst table entry. This record contains the information for a single burst entry including the dimensions of the burst, the timing of the burst and where it is located within the image MDS. With an approximate burst cycle time of 1s and a maximum product length of 25 minutes, the maximum size of this list is 1500 elements. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("burst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public burstType[] burst {
            get {
                return this.burstField;
            }
            set {
                this.burstField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for a burst table entry.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class burstType {
        
        private System.DateTime azimuthTimeField14;
        
        private @double azimuthAnxTimeField;
        
        private System.DateTime sensingTimeField;
        
        private uint64 byteOffsetField;
        
        private intArray firstValidSampleField;
        
        private intArray lastValidSampleField;
        
        /// <remarks>
///Zero Doppler azimuth time of the first line of this burst [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField14;
            }
            set {
                this.azimuthTimeField14 = value;
            }
        }
        
        /// <remarks>
///Zero Doppler azimuth time of the first line of this burst relative to the Ascending Node Crossing (ANX) time. [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double azimuthAnxTime {
            get {
                return this.azimuthAnxTimeField;
            }
            set {
                this.azimuthAnxTimeField = value;
            }
        }
        
        /// <remarks>
///Sensing time of the first input line of this burst [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime sensingTime {
            get {
                return this.sensingTimeField;
            }
            set {
                this.sensingTimeField = value;
            }
        }
        
        /// <remarks>
///Byte offset of this burst within the image MDS.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint64 byteOffset {
            get {
                return this.byteOffsetField;
            }
            set {
                this.byteOffsetField = value;
            }
        }
        
        /// <remarks>
///An array of integers indicating the offset of the first valid image sample within each range line. This array contains count attribute integers, equal to the numberOfLines field (i.e. one value per range line within the burst), separated by spaces. If a range line does not contain any valid image samples, the integer is set to -1.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public intArray firstValidSample {
            get {
                return this.firstValidSampleField;
            }
            set {
                this.firstValidSampleField = value;
            }
        }
        
        /// <remarks>
///An array of integers indicating the offset of the last valid image sample within each range line. This array contains count attribute integers, equal to the numberOfLines (i.e. one value per range line within the burst), separated by spaces. If a range line does not contain any valid image samples, the integer is set to -1.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public intArray lastValidSample {
            get {
                return this.lastValidSampleField;
            }
            set {
                this.lastValidSampleField = value;
            }
        }
    }
    
    /// <remarks>
///String containing an array of int values separated by spaces. The mandatory count attribute defines the number of elements in the array.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class intArray {
        
        private string countField23;
        
        private string unitsField6;
        
        private string valueField9;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField23;
            }
            set {
                this.countField23 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField6;
            }
            set {
                this.unitsField6 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField9;
            }
            set {
                this.valueField9 = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 geolocation grid annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1GeolocationGridType {
        
        private geolocationGridPointListType geolocationGridPointListField;
        
        /// <remarks>
///Geolocation grid. This element is a list of geolocationGridPoint records which contains grid point entries for each line/pixel combination based on a configured resolution. The list contains an entry for each geolocation grid update made along azimuth.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public geolocationGridPointListType geolocationGridPointList {
            get {
                return this.geolocationGridPointListField;
            }
            set {
                this.geolocationGridPointListField = value;
            }
        }
    }
    
    /// <remarks>
///List of geolocation grid point annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class geolocationGridPointListType {
        
        private string countField24;
        
        private geolocationGridPointType[] geolocationGridPointField;
        
        /// <remarks>
///Number of geolocation grid point records within the list. 
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField24;
            }
            set {
                this.countField24 = value;
            }
        }
        
        /// <remarks>
///Geolocation grid point. This record describes geolocation information for a single point (line/pixel combination) within the image MDS. For 11 geolotcation grid points across range and a new set of points calculated every 1s in azimuth, for a maximum product length of 25 minutes, the maximum size of this list is 16500 elements.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("geolocationGridPoint", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public geolocationGridPointType[] geolocationGridPoint {
            get {
                return this.geolocationGridPointField;
            }
            set {
                this.geolocationGridPointField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for a geolocation grid point.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class geolocationGridPointType {
        
        private System.DateTime azimuthTimeField15;
        
        private @double slantRangeTimeField3;
        
        private uint32 lineField;
        
        private uint32 pixelField;
        
        private @double latitudeField;
        
        private @double longitudeField;
        
        private @double heightField;
        
        private @double incidenceAngleField1;
        
        private @double elevationAngleField1;
        
        /// <remarks>
///Zero Doppler azimuth time to which grid point applies [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField15;
            }
            set {
                this.azimuthTimeField15 = value;
            }
        }
        
        /// <remarks>
///Two way slant range time to grid point [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double slantRangeTime {
            get {
                return this.slantRangeTimeField3;
            }
            set {
                this.slantRangeTimeField3 = value;
            }
        }
        
        /// <remarks>
///Reference image MDS line to which this geolocation grid point applies.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks>
///Reference image MDS sample to which this geolocation grid point applies.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 pixel {
            get {
                return this.pixelField;
            }
            set {
                this.pixelField = value;
            }
        }
        
        /// <remarks>
///Geodetic latitude of grid point [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        /// <remarks>
///Geodetic longitude of grid point [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        /// <remarks>
///Height of the grid point above sea level [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks>
///Incidence angle to grid point [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double incidenceAngle {
            get {
                return this.incidenceAngleField1;
            }
            set {
                this.incidenceAngleField1 = value;
            }
        }
        
        /// <remarks>
///Elevation angle to grid point [degrees].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double elevationAngle {
            get {
                return this.elevationAngleField1;
            }
            set {
                this.elevationAngleField1 = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 level 1 SRGR and GRSR conversion annotations.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1CoordinateConversionType {
        
        private coordinateConversionListType coordinateConversionListField;
        
        /// <remarks>
///Coordinate conversion list. This element is a list of coordinateConversion records that describe coversion between the slant range and ground range coordinate systems. The list contains an entry for each update made along azimuth. This list applies to and is filled in only for GRD products and therefore has a length of zero for SLC products.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public coordinateConversionListType coordinateConversionList {
            get {
                return this.coordinateConversionListField;
            }
            set {
                this.coordinateConversionListField = value;
            }
        }
    }
    
    /// <remarks>
///List of ground range to slant range conversion polynomials.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class coordinateConversionListType {
        
        private string countField25;
        
        private coordinateConversionType[] coordinateConversionField1;
        
        /// <remarks>
///Number of coordinate conversion records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField25;
            }
            set {
                this.countField25 = value;
            }
        }
        
        /// <remarks>
///The polynomial used to convert image pixels between slant range and ground range. The polynomials are time-stamped with the zero Doppler azimuth and two way slant range times to which they apply. The coefficients used on range lines between updates are found by linear interpolation between the updated and previous values. For a minimum spacing of 1s between coordinateConversion record updates and a maximum acquisition length of 25 minutes, the maximum number of records in the list is 1500.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("coordinateConversion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public coordinateConversionType[] coordinateConversion {
            get {
                return this.coordinateConversionField1;
            }
            set {
                this.coordinateConversionField1 = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for SRGR/GRSR conversion information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class coordinateConversionType {
        
        private System.DateTime azimuthTimeField16;
        
        private @double slantRangeTimeField4;
        
        private @double sr0Field;
        
        private doubleCoefficientArray srgrCoefficientsField;
        
        private @double gr0Field;
        
        private doubleCoefficientArray grsrCoefficientsField;
        
        /// <remarks>
///Zero Doppler azimuth time at which parameters apply [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField16;
            }
            set {
                this.azimuthTimeField16 = value;
            }
        }
        
        /// <remarks>
///Two way slant range time to first range sample [s].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double slantRangeTime {
            get {
                return this.slantRangeTimeField4;
            }
            set {
                this.slantRangeTimeField4 = value;
            }
        }
        
        /// <remarks>
///Slant range origin used for ground range calculation [m]. 
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double sr0 {
            get {
                return this.sr0Field;
            }
            set {
                this.sr0Field = value;
            }
        }
        
        /// <remarks>
///Coefficients to convert from slant range to ground range. Ground range = g0 + g1(sr-sr0) + g2 (sr-sr0)^2 + g3(sr-sr0)^3 + g4(sr-sr0)^4 where sr is the slant range distance to the desired pixel.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public doubleCoefficientArray srgrCoefficients {
            get {
                return this.srgrCoefficientsField;
            }
            set {
                this.srgrCoefficientsField = value;
            }
        }
        
        /// <remarks>
///Ground range origin used for slant range calculation [m].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public @double gr0 {
            get {
                return this.gr0Field;
            }
            set {
                this.gr0Field = value;
            }
        }
        
        /// <remarks>
///Coefficients to convert from ground range to slant range coefficients. Slant range = s0 + s1(gr-gr0) + s2 (gr-gr0)^2 + s3(gr-gr0)^3 + s4(gr-gr0)^4 where gr is the ground range distance to the desired pixel.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public doubleCoefficientArray grsrCoefficients {
            get {
                return this.grsrCoefficientsField;
            }
            set {
                this.grsrCoefficientsField = value;
            }
        }
    }
    
    /// <remarks>
///String containing an array of double precision floating point coefficient values separated by spaces. The mandatory count attribute defines the number of elements in the array.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doubleCoefficientArray {
        
        private string countField26;
        
        private string unitsField7;
        
        private string valueField10;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField26;
            }
            set {
                this.countField26 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string units {
            get {
                return this.unitsField7;
            }
            set {
                this.unitsField7 = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField10;
            }
            set {
                this.valueField10 = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for Sentinel-1 Level 1 swath merging information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class l1SwathMergeType {
        
        private swathMergeListType swathMergeListField;
        
        /// <remarks>
///Merge information for IW and EW GRD products. This list contains one record per swath.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathMergeListType swathMergeList {
            get {
                return this.swathMergeListField;
            }
            set {
                this.swathMergeListField = value;
            }
        }
    }
    
    /// <remarks>
///List of swath merging records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swathMergeListType {
        
        private string countField27;
        
        private swathMergeType[] swathMergeField;
        
        /// <remarks>
///Number of swath merge records within the list.  
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField27;
            }
            set {
                this.countField27 = value;
            }
        }
        
        /// <remarks>
///This record contains the information needed to identify where each burst of the given swath was merged within the image MDS.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("swathMerge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathMergeType[] swathMerge {
            get {
                return this.swathMergeField;
            }
            set {
                this.swathMergeField = value;
            }
        }
    }
    
    /// <remarks>
///Swath merging information for TOPS modes.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swathMergeType {
        
        private swathType swathField7;
        
        private swathBoundsListType swathBoundsListField;
        
        /// <remarks>
///Swath to which swath merging information applies.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathType swath {
            get {
                return this.swathField7;
            }
            set {
                this.swathField7 = value;
            }
        }
        
        /// <remarks>
///This list contains the information needed to identify where the current swath has been merged into the image MDS. Each swathBounds record represents a rectangular area that may include several burst merged in azimuth. The se records do not describe where individual bursts were merged in azimuth, within a swath.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathBoundsListType swathBoundsList {
            get {
                return this.swathBoundsListField;
            }
            set {
                this.swathBoundsListField = value;
            }
        }
    }
    
    /// <remarks>
///List of swath boundary records.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swathBoundsListType {
        
        private string countField28;
        
        private swathBoundsType[] swathBoundsField;
        
        /// <remarks>
///Number of swath bounds records within the list.
///</remarks>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string count {
            get {
                return this.countField28;
            }
            set {
                this.countField28 = value;
            }
        }
        
        /// <remarks>
///Swath boundary record. This record contains the information needed to identify the position of the swath within the image. The swath boundary is identified by a rectangular area defined by the points (firstRangeSample,firstAzimuthLine) and (lastRangeSample,lastAzimuthLine). The optimal range cut line can vary in azimuth and so a new record is included for each swath boundary update in azimuth. It is important to note that the information on the azimuth cut line is lost and not represented by these annotations. Although a line in azimuth is implicitly created by each bounding box, this does not necessarily represent the azimuth cut line used during swath merging. For an average spacing of 1s between swath bound updates and a maximum acquisition length of 25 minutes, the maximum number of records in the list is 1500.
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute("swathBounds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public swathBoundsType[] swathBounds {
            get {
                return this.swathBoundsField;
            }
            set {
                this.swathBoundsField = value;
            }
        }
    }
    
    /// <remarks>
///Annotation record for swath boundary information.
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class swathBoundsType {
        
        private System.DateTime azimuthTimeField17;
        
        private uint32 firstAzimuthLineField;
        
        private uint32 firstRangeSampleField;
        
        private uint32 lastAzimuthLineField;
        
        private uint32 lastRangeSampleField;
        
        /// <remarks>
///Zero Doppler azimuth time of firstAzimuthLine [UTC].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime azimuthTime {
            get {
                return this.azimuthTimeField17;
            }
            set {
                this.azimuthTimeField17 = value;
            }
        }
        
        /// <remarks>
///First azimuth line of the swath boundary [lines].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 firstAzimuthLine {
            get {
                return this.firstAzimuthLineField;
            }
            set {
                this.firstAzimuthLineField = value;
            }
        }
        
        /// <remarks>
///First range sample of the swath boundary [samples].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 firstRangeSample {
            get {
                return this.firstRangeSampleField;
            }
            set {
                this.firstRangeSampleField = value;
            }
        }
        
        /// <remarks>
///Last azimuth line of the swath boundary [lines].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 lastAzimuthLine {
            get {
                return this.lastAzimuthLineField;
            }
            set {
                this.lastAzimuthLineField = value;
            }
        }
        
        /// <remarks>
///Last range sample of the swath boundary [samples].
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public uint32 lastRangeSample {
            get {
                return this.lastRangeSampleField;
            }
            set {
                this.lastRangeSampleField = value;
            }
        }
    }
}
